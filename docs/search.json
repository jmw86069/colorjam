[{"path":"https://jmw86069.github.io/colorjam/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 James M. Ward Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"id_11dec2024","dir":"","previous_headings":"","what":"11dec2024","title":"colorjam Todo","text":"Improve blend_color() handling alpha builds time, use formula: + (1-) * b ,b alpha values 0 1.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-12jul2024","dir":"","previous_headings":"","what":"TODO 12jul2024","title":"colorjam Todo","text":"blend_colors() - consider preset=getOption(\"colorjam.blend.preset\") can easily customized fixed scheme. Fix package dependencies also load jamba upon load. color_pie(): make similar jamba::showColors() color_pie(rainbowJam(12)) show hex color labels default, jamba::showColors() Consider argument inner_radius make donut plots. Consider replacing label_radius combination label_just label justification relative position, just=0 means point left(bottom), just=1 means point right(top). label_pos label position within inner/outer radius: label_pos=1 positions outer radius label_pos=0 positions inner radius Consider new color display function color_spiral() Alternative color_pie() arrange colors around color wheel concentric rings. Consider using circlize spiral display? Goal show lot colors organized way facilitate picking color pre-defined set. Consider adding dependency farver>=2.1.2 confirm fixed functions Improve color wheels (angles color breaks) Revisit color calculations given farver>=2.1.2 fixed bug related color distance calculations, nearest color calculations. \"dichromat2\" enough actual red, much brown/salmon/hot pink problem C/L sequence producing good red \"dichromat\" much salmon/orange enough gold, transition orange gold seems slow using n=6 “mediumpurple1” (H=272), “purple_illusion” (H=279) similar. Maybe spread colors four quadrants: gold, red, purple, blue? \"ryb\" much fuschia/hot pink color wheel, n=12 two sections hot pink n=36 looks nice, except much pink \"ryb2\" red occur reliably n=4, becomes brown/salmon/pink even n=36 RED? (Haha) Consider finally porting Fibonacci color method. Basic premise: Use magic number phi represent Fibonacci spiral around color wheel.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-24apr2024","dir":"","previous_headings":"","what":"TODO 24apr2024","title":"colorjam Todo","text":"closest_named_color() closestRcolor() Consider option return input/output values data.frame: hex color value H,C,L values distance value calculated Consider alternative color distance function. Standard HCL color distance function. Consider farver::compare_colour() adjustment hue difference.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-14mar2024","dir":"","previous_headings":"","what":"TODO 14mar2024","title":"colorjam Todo","text":"DONE. Bug: blend_colors() allow changing preset DONE. h2hw() hw2h() prioritize preset h1,h2 causes blend_colors() use global preset, since pass preset=\"custom\" enable -riding default h1,h2 values.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-08jan2024","dir":"","previous_headings":"","what":"TODO 08jan2024","title":"colorjam Todo","text":"Consider new accessible color wheel. Start red-yellow-blue color wheel. Remove wedges green/yellow-green. Remove corresponding complement fuschia/pink. Test remaining wheel color-blindness friendly distinction.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-14nov2023","dir":"","previous_headings":"","what":"TODO 14nov2023","title":"colorjam Todo","text":"Custom showColors() specifically sorted colors indicate along x-axis numeric breaks occur often sorted Hue, indicate breaks along x-axis determine numeric values first sorted vector, range, pretty()","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-01oct2023","dir":"","previous_headings":"","what":"TODO 01oct2023","title":"colorjam Todo","text":"rainbowJam() consider Hrange argument rainbowJam() restrict colors range hues. Unclear means virtual hue, output hue, probably virtual hue. R-shiny app changes: h1,h2 scatterplot, editing point change rank restricted x/y axis neighboring points help keep points properly aligned, example preventing identical points re-ordered. add label plotly shapes, using just row number consider double-clicking add point h1,h2 plot. Point fixed neighboring points x-axis, thus constraining y-axis value. use plotly::showModal() pop-confirmation, later. consider right-clicking remove point h1,h2 plot. , use showModal() confirm, prevent accidentally removing point. (convenient “Undo”… guess.) Consider “Undo” button previous values, “Undo” button hidden. Reverts previous h1,h2 values, hides “Undo” button. Upon editing value, store previous values, display “Undo” button. design2colors() (ported ) consider changing class colors assigned, ensure class uses phase values starting place, order. Goal first color class using phase step. class colors assigned, consider assigning group colors using hue splitting instead lightness splitting. Generate range hues conflict class hues. (use new argument Hrange.) Consider retiring h2hw(),hw2h(),h2hwOptions() simplify system use “Virtual Hue” “Actual Hue”?","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-25sep2023","dir":"","previous_headings":"","what":"TODO 25sep2023","title":"colorjam Todo","text":"consider adding launchColorjamShiny() colorjam.shinyapps.io testing. add unit testing testthat, currently coverage via @examples consider shinytest2 test R-shiny app. Probably urgent.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-20sep2023","dir":"","previous_headings":"","what":"TODO 20sep2023","title":"colorjam Todo","text":"Consider secret test mode rainbowJam() uses HSL instead HCL likely show less contrast HCL, better saturation per hue testing, use C,L values rescaled HSL range Move platjam::design2colors() ? Review preset step real-world usage, decide whether default colors visually distinct enough R package pals provides functions evaluate color palettes packages: colorBlindness, colorblindr, shades, ggsci Consider expanding Lrange, Crange broaden visual range.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-19sep2023","dir":"","previous_headings":"","what":"TODO 19sep2023","title":"colorjam Todo","text":"DONE. sort_colors() default sort hue, chroma, luminance. DONE. Consider HCL--HSL hue mapping DONE. remap_colors() convert colors use different preset upon changing hue convert HCL hue HSL hue convert color internally HSL determine current S,L values adjust new hue, apply S,L values upon testing, HSL work nearly well hoped; HCL dark; blending HSL HCL conversions seemed effective","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-13sep2023","dir":"","previous_headings":"","what":"TODO 13sep2023","title":"colorjam Todo","text":"DONE. Simple R-shiny app visualize color palettes adjustments select number colors edit step values Chroma Luminance edit phase order steps choose preset known color wheels bonus points: edit color wheel h1, h2 points: click--drag modify existing points add new point delete existing point DONE. enhance \"preset\" DONE. associate default_step DONE. associate direction: 1 -1 direction around color wheel add_colorjam_preset() validate h1,h2 direction. DONE. Fix approx_degrees() multiple h1 h2 values repeated. approx() function requires unique x values. Data sorted x,y uniqueness enforced x. bug mainly affects h1,h2 h2 used x.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-07sep2023","dir":"","previous_headings":"","what":"TODO 07sep2023","title":"colorjam Todo","text":"DONE. register new color wheel example modifying existing color wheel adjust_hue_warp() saving named preset. use igraph:::.igraph.shapes model, store graph node shapes environment, provide access igraph::shapes() allow new shapes igraph::add_shape(). DONE. port color_complement() package. make_jam_divergent() argument linear2 supplied, get color_complement(linear1) DONE. Error using jam_linear jam_divergent without package prefix colorjam package formally loaded.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-23sep2022","dir":"","previous_headings":"","what":"TODO 23sep2022","title":"colorjam Todo","text":"Migrate platjam::design2colors() package Consider color_list related functions, since design2colors() produces list colors color functions. merge_color_lists() combine two color lists one, taking either union assigned colors, first color function, relevant.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo-22may2022","dir":"","previous_headings":"","what":"TODO 22may2022","title":"colorjam Todo","text":"Migrate platjam::design2colors() . Intended take data.frame group, subgroup, create list colors column, either named character color vectors named value, color functions numeric columns, created circlize::colorRamp2(). longer necessary: Implement HSL color space categorical colors, slowly replacing HCL colorspace rainbowJam().","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"todo","dir":"","previous_headings":"","what":"TODO","title":"colorjam Todo","text":"items likely active todo list: Add optional parameter group2colors() applies systematic re-ordering colors assigned labels. example, labels typically assigned sequential color hue, may ideal cases. method assign colors every n-th color. Add subgroup2colors() extends group2colors() splitting color subgroups needed. way, experiment factors can assigned colors, factor levels assigned values gradient color. future, function optionally use color family (small range color hues) factor, vary hue, well chroma/luminance factor levels. vals2colorLevels() assigns colors numeric range, keeping zero mid-point divergent color scales. Notably allows “color lens” applies scalable adjustment color ramp enhance reduce color intensity across numeric range.","code":""},{"path":"https://jmw86069.github.io/colorjam/TODO.html","id":"color-table-viewer-ascii","dir":"","previous_headings":"","what":"color table viewer (ASCII)","title":"colorjam Todo","text":"Perhaps frequently used JAM function () fixed-width colorized table viewer console output. Similar theory custom tibble print method, function goes colorizing values column help visual summary. Especially useful checking experiment design, typos labels, numeric ranges. can, example, make text heatmap numeric values, can helpful spotting outliers. also trims column values table fits within one screen widths. Similar R package pillar offers colorized formatted data.frame/tibble output. Unclear whether can provide equivalent capabilities.","code":""},{"path":"https://jmw86069.github.io/colorjam/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James M. Ward. Author, maintainer.","code":""},{"path":"https://jmw86069.github.io/colorjam/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ward J (2024). colorjam: Jam Color manipulation functions. R package version 0.0.30.900, https://jmw86069.github.io/colorjam.","code":"@Manual{,   title = {colorjam: Jam Color manipulation functions},   author = {James M. Ward},   year = {2024},   note = {R package version 0.0.30.900},   url = {https://jmw86069.github.io/colorjam}, }"},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"why-colorjam","dir":"","previous_headings":"","what":"Why colorjam?","title":"Jam Color manipulation functions","text":"colorjam provides visually distinct categorical colors arbitrary length, using optimized pattern chroma/luminance values. Scalable. Visually distinct categorical colors arbitrary length. rainbowJam(n) ggplot2 functions: scale_color_jam(), scale_fill_jam() Color-blindness friendly. Optimized three kinds color blindness. Flexible. \"dichromat\", \"ryb\", \"rgb\" color wheels available. Optimized statistical design. First color gold assigned control groups: Interactive R-shiny app. launchColorjamShiny()","code":""},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Jam Color manipulation functions","text":"Install colorjam using remotes package: , use pacman keep package updated: colorjam package prepared CRAN “near” future.","code":"remotes::install_github(\"jmw86069/colorjam\"); ### if necessary, install pacman: # install.packages(\"pacman\") library(pacman) p_load_current_gh(\"jmw86069/colorjam\")"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"command-reference","dir":"","previous_headings":"","what":"Command reference","title":"Jam Color manipulation functions","text":"full command reference available : colorjam command reference","code":""},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"quick-start-with-colorjam","dir":"","previous_headings":"","what":"Quick start with colorjam","title":"Jam Color manipulation functions","text":"examples , two packages loaded:","code":"library(colorjam); library(jamba);"},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"dichromat-default","dir":"","previous_headings":"Quick start with colorjam > Categorical colors","what":"dichromat (default)","title":"Jam Color manipulation functions","text":"Let’s generate n=5 categorical colors, displayed jamba::showColors().  Alternatively, color_pie() displays colors pie circle.  Categorical colors scalable.  Label colors using 4994 named_colors:  Gradually increase number colors, use color_pie() plot concentric circles.","code":"showColors(rainbowJam(5)); color_pie(rainbowJam(5)); color_pie(rainbowJam(15)); color_pie(rainbowJam(15, nameStyle=\"closest_named_color\")); colorList <- lapply(nameVector(c(36, 24, 12)), function(n){    rainbowJam(n, nameStyle=\"n\"); }); color_pie(colorList,    main=\"preset='dichromat2' (default)\");"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"what-is-dichromat-here","dir":"","previous_headings":"Quick start with colorjam > Categorical colors > dichromat (default)","what":"What is “dichromat” here?","title":"Jam Color manipulation functions","text":"Every color system “color wheel” - something like red-green-blue (RGB) red-yellow-blue (RYB). defined new color wheel \"dichromat\" maximize visual distinction color hues people color blindness. process driven R package dichromat, gave name respect. \"dichromat\" color wheel allocates approximately equal halves color wheel visually distinct \"deutan\", \"protan\", \"tritan\" forms color blindness. Roughly akin using “cool”/“warm” colors half color wheel, simulated color. wheel avoids colors difficult distinguish color wheel. isn’t perfect. However colorjam provide first scalable method (seen) produce categorical colors optimized three major forms color-blindness. excellent resources provide color-blindness friendly colors, scalable. However fair, fixed colors may best realistic approach, colorjam may ideal solution.","code":""},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"red-yellow-blue","dir":"","previous_headings":"Quick start with colorjam > Categorical colors","what":"red-yellow-blue","title":"Jam Color manipulation functions","text":"“full rainbow” color wheel “red-yellow-blue” recommended default RGB provide best full rainbow. performs particularly well color blending (see Color-blending) additive paint-like mixing. preset=\"ryb\" red-yellow-blue  preset=\"ryb2\" (recommended) yellow-red-blue, starting yellow  reason start yellow noticed first category set reference control group scientific experiment. intuitive reference/control neutral color, instead bright red. Previous versions (<= 0.0.23.900) colorjam used red-yellow-blue color wheel starting red.","code":"colorList1 <- lapply(nameVector(c(12)), function(n){    rainbowJam(n, preset=\"ryb\"); }); color_pie(colorList1,    main=\"Red-Yellow-Blue\\npreset='ryb' (starting at red)\"); colorList1 <- lapply(nameVector(c(16)), function(n){    rainbowJam(n, preset=\"ryb2\"); }); color_pie(colorList1,    main=\"Yellow-Red-Blue\\npreset='ryb2' (starting at yellow)\");"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"red-green-blue","dir":"","previous_headings":"Quick start with colorjam > Categorical colors","what":"red-green-blue","title":"Jam Color manipulation functions","text":"Similarly, R default “red-green-blue” color wheel: preset=\"rgb\" R default RGB color wheel  (Look much color wheel blue-green. style , haha.) preset=\"rgb2\" R default RGB color wheel, starting yellow","code":"color_pie(    rainbowJam(16, preset=\"rgb\"),    main=\"Red-Green-Blue\\npreset='rgb' (starting at red)\"); color_pie(    rainbowJam(16, preset=\"rgb2\"),    main=\"Red-Green-Blue\\npreset='rgb2' (starting at yellow)\");"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"more-about-color-wheels","dir":"","previous_headings":"Quick start with colorjam > Categorical colors","what":"More about color wheels","title":"Jam Color manipulation functions","text":"4994 colors provided named_colors (see next section) collated numerous sources, ultimately represent colors people motivated name. Look many named colors include red/orange/yellow compared green/blue/purple! compare RGB color wheel , disproportionately represents blue/green, detriment red/yellow. , named_colors filtered least Chroma 40 using subset_colors(named_colors, C > 40)  Clearly people can see many red-orange-yellow, comparatively green/blue colors. bias partly lower sensitivity colors “cyan”, partly due RGB color monitors unable produce high saturation colors hue. Color theory fascinating, endlessly complex, part person slightly different.","code":"color_pie(unname(    subset_colors(named_colors, C > 40)))"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"color-matching--color-naming","dir":"","previous_headings":"Quick start with colorjam","what":"Color matching / Color naming","title":"Jam Color manipulation functions","text":"Two functions provided match colors reference set, convenient way assign color names. closestRcolor() matches colors 657 colors grDevices::colors(), custom reference colors can supplied. closest_named_color() matches colors 4883 named_colors, adds 4447 colors meodai/named-colors (amazing!) 436 colors already represented grDevices::colors(). argument showPalette=TRUE plot original colors closest matched color comparison.   two underlying methods: \"HCL\" (default) matches color hue angle, custom weights channels H, C, L. \"LUV\" matches colors using non-polar coordinates Euclidean distance across channels L, U, V. Greyscale colors matches separately subset grayscale reference colors, avoid using hue unsaturated colors.","code":"cnc <- closest_named_color(c(rainbowJam(12), \"grey\"),    showPalette=TRUE,    main=\"closest_named_color() using `named_colors`\"); crc <- closestRcolor(c(rainbowJam(12), \"grey\"),    showPalette=TRUE,    main=\"closestRcolor() using `colors()`\");"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"color-blending","dir":"","previous_headings":"Quick start with colorjam","what":"Color-blending","title":"Jam Color manipulation functions","text":"blend_colors() useful features: Paint-style blending. blue + yellow = green. (default RGB: blue + yellow = grey) Scalable number colors. Able mix two colors. Transparency-aware. Accounts color transparency mixing. argument do_plot=TRUE plot visual summary mixing results.","code":"blent1 <- blend_colors(c(\"red\", \"blue\"), do_plot=TRUE); blent2 <- blend_colors(c(\"gold\", \"blue\"), do_plot=TRUE); blent3 <- blend_colors(c(\"gold\", \"red\"), do_plot=TRUE); blent8 <- blend_colors(c(\"red1\", \"red3\", \"blue\"), do_plot=TRUE); blent9 <- blend_colors(c(\"red1\", \"blue1\", \"blue4\"), do_plot=TRUE); blent10 <- blend_colors(c(\"red\", \"blue\", \"ivory\"), do_plot=TRUE);"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"color-splitting","dir":"","previous_headings":"Quick start with colorjam","what":"Color-splitting","title":"Jam Color manipulation functions","text":"color2gradient() can split colors using light-dark gradient.  intensity gradient adjusted dex, “darkness expansion factor”.","code":"colorSet <- rainbowJam(5); colorSet4 <- color2gradient(colorSet, n=4); color_pie(list(    colorSet4=unname(colorSet4),    colorSet=rep(colorSet, each=4)),    main=\"Color split into 4 additional subsets.\"); colorSet <- rainbowJam(5); colorSet4a <- color2gradient(colorSet,    n=4,    dex=1/2); colorSet4c <- color2gradient(colorSet,    n=4,    dex=3); colorSet4b <- color2gradient(colorSet,    n=4,    dex=10); colorSet <- rep(colorSet, each=4) names(colorSet4c) <- names(colorSet4b) <- names(colorSet4a) <- names(colorSet4) <- \"\"; names(colorSet4b)[5:8] <- c(\"  10\", \"  |\", \"  |\", \"  v\") names(colorSet4c)[5:8] <- c(\"  3\", \"  |\", \"  |\", \"  v\") names(colorSet4)[5:8] <- c(\" 1\", \" |\", \" |\", \" v\") names(colorSet4a)[5:8] <- c(\"1/2\", \" |\", \" |\", \" v\") color_pie(list(    `dex=10`=(colorSet4b),    `dex=3`=(colorSet4c),    `dex=1\\n(default)`=(colorSet4),    `dex=1/2`=(colorSet4a),    colorSet=colorSet),    main=paste0(\"Intensity of the gradient is adjusted with 'dex'\\n\",       \"(darkness expansion factor)\"));"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"ggplot2-functions","dir":"","previous_headings":"Quick start with colorjam","what":"ggplot2 functions","title":"Jam Color manipulation functions","text":"scale_color_jam() categorical colors ggplot2 colour scale_fill_jam() categorical colors ggplot2 fill  Colors can adjusted darkness, saturation, make interesting point shapes:","code":"if (suppressPackageStartupMessages(require(ggplot2))) {    dsamp <- ggplot2::diamonds[sample(nrow(ggplot2::diamonds), 1000),];    d <- ggplot2::ggplot(dsamp, ggplot2::aes(carat, price)) +       ggplot2::geom_point(ggplot2::aes(colour=cut, fill=cut), size=4, shape=21);        d +       scale_color_jam() +       scale_fill_jam() +       ggplot2::ggtitle(\"scale_color_jam()\"); } if (suppressPackageStartupMessages(require(ggplot2))) {    d +       scale_color_jam(darkFactor=1.5) +       scale_fill_jam(darkFactor=-1.2) +       ggplot2::ggtitle(\"Adjustment using 'darkFactor'\"); }"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"custom-ggplot2-theme","dir":"","previous_headings":"Quick start with colorjam","what":"Custom ggplot2 theme","title":"Jam Color manipulation functions","text":"alternative ggplot2 theme provided.  function provides common arguments customize: base_size: numeric default font size points. blankGrid: logical remove background grid lines.","code":"if (suppressPackageStartupMessages(require(ggplot2))) {    d +       scale_color_jam(darkFactor=1.5) +       scale_fill_jam(darkFactor=-1.2) +       ggplot2::ggtitle(\"theme_jam()\") +       theme_jam() } if (suppressPackageStartupMessages(require(ggplot2))) {    d +       scale_color_jam(darkFactor=1.5) +       scale_fill_jam(darkFactor=-1.2) +       ggplot2::ggtitle(\"theme_jam()\") +       theme_jam(base_size=24) }"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"jam-color-gradients","dir":"","previous_headings":"Quick start with colorjam","what":"Jam color gradients","title":"Jam Color manipulation functions","text":"jam_linear: linear (sequential) gradients white baseline color  jam_divergent: divergent color gradients black baseline color  driving use case display genome sequence coverage heatmaps slightly different colors type signal. wanted linear divergent color gradients use tandem, example \"jam_linear$firebrick\" \"jam_divergent$firebrick_skyblue\".","code":"jamba::showColors(jam_linear) jamba::showColors(jam_divergent)"},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"two-step-linear-gradients","dir":"","previous_headings":"Quick start with colorjam > Color gradients","what":"Two-step linear gradients","title":"Jam Color manipulation functions","text":"twostep_gradient() combines two linear gradients one linear gradient. Two linear gradients combined, using orange red:  Two linear gradients combined, using aquamarine blue:","code":"ts1 <- twostep_gradient(\"orange2\", \"firebrick\", n=11, debug=TRUE) #>       w1    w2 #> 1  1.000 0.000 #> 2  1.000 0.000 #> 3  0.838 0.162 #> 4  0.686 0.314 #> 5  0.544 0.456 #> 6  0.414 0.586 #> 7  0.296 0.704 #> 8  0.192 0.808 #> 9  0.105 0.895 #> 10 0.037 0.963 #> 11 0.000 1.000 title(\"orange2 + firebrick\"); ts2 <- twostep_gradient(\"aquamarine\", \"dodgerblue\", n=11, debug=TRUE) #>       w1    w2 #> 1  1.000 0.000 #> 2  1.000 0.000 #> 3  0.838 0.162 #> 4  0.686 0.314 #> 5  0.544 0.456 #> 6  0.414 0.586 #> 7  0.296 0.704 #> 8  0.192 0.808 #> 9  0.105 0.895 #> 10 0.037 0.963 #> 11 0.000 1.000 title(\"aquamarine + dodgerblue\");"},{"path":"https://jmw86069.github.io/colorjam/index.html","id":"custom-divergent-gradients","dir":"","previous_headings":"Quick start with colorjam > Color gradients","what":"Custom divergent gradients","title":"Jam Color manipulation functions","text":"make_jam_divergent() combines two linear gradients.","code":"ts1ts2 <- make_jam_divergent(list(ts2=ts2),    list(ts1=ts1),    n=21) jamba::showColors(ts1ts2)"},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_preset.html","id":null,"dir":"Reference","previous_headings":"","what":"Add colorjam hue warp preset — add_colorjam_preset","title":"Add colorjam hue warp preset — add_colorjam_preset","text":"Add colorjam hue warp preset","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_preset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add colorjam hue warp preset — add_colorjam_preset","text":"","code":"add_colorjam_preset(   preset,   h1,   h2 = NULL,   direction = 1,   default_step = NULL,   description = NULL,   verbose = TRUE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_preset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add colorjam hue warp preset — add_colorjam_preset","text":"preset character string preset name. h1, h2 numeric vectors equal length, NULL remove existing preset. direction numeric one two accepted values: 1: (default) indicating forward (increasing, clockwise) progression around color wheel -1: indicating reverse (decreasing, counter-clockwise) progression around color wheel. default_step character string indicating recommended step colorjam_steps(). description character optional text description preset. description added attribute: attr(x, \"description\") ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_preset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add colorjam hue warp preset — add_colorjam_preset","text":"TRUE, invisibly.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_preset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add colorjam hue warp preset — add_colorjam_preset","text":"colorjam presets represent customized color wheels, used various color operations. h1 contains actual color hue values, range c(0, 360). values intended used HCL color hue operations, jamba::hcl2col(), colorspace::polarLUV(). equal HSV HLS (also known HSL) color hues, although colorjam preset used convert HCL HSV. h2 contains virtual color hue values, range c(0, 360). values intended represent full virtual color wheel, mapping virtual hue h2 actual hue h1. values h1 need represented, fact \"dichromat\" presets explicitly remove sizable chunk green color hues. direction direction h1 relative h2 encoded : 1 forward direction, -1 reverse direction. default_step used primarily rainbowJam() define appropriate Chroma/Luminance stepping pattern choosing actual HCL colors around color wheel. optional attribute \"description\" attr(x, \"description\").","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_preset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add colorjam hue warp preset — add_colorjam_preset","text":"","code":"h1 <- c(8, 30, 65,    120, 200, 240,    260, 280, 330) h2 <- c(115, 35.9, -3.7,    -3.7, -3.7, -3.7,    -70.9, -189.6, -229.2) add_colorjam_preset(\"custom_dichromat\",    h1=h1, h2=h2, direction=-1, default_step=\"v24\",    description=\"Custom dichromat example\") #> ℹ added preset 'custom_dichromat'.  # behold the new preset name appears colorjam_presets() #> [1] \"custom_dichromat\" \"dichromat\"        \"dichromat2\"       \"hcl_to_hsl\"       #> [5] \"none\"             \"rgb\"              \"rgb2\"             \"ryb\"              #> [9] \"ryb2\"              # the preset data is available colorjam_presets(\"custom_dichromat\") #> $h1 #> [1]  30   8 330 280 260 240 200 120  65 #>  #> $h2 #> [1]  35.9 115.0 130.8 170.4 289.1 356.3 356.3 356.3 356.3 #>  #> $direction #> [1] -1 #>  #> $default_step #> [1] \"v24\" #>  #> attr(,\"description\") #> [1] \"Custom dichromat example\"  # the preset is used to create rainbow categorical colors color_pie(rainbowJam(n=10,    preset=\"custom_dichromat\"))   # remove a preset by defining `h1=NULL` add_colorjam_preset(\"custom_dichromat\", h1=NULL) #> Warning: object 'preset' not found #> ℹ removed preset 'custom_dichromat'. colorjam_presets() #> [1] \"custom_dichromat\" \"dichromat\"        \"dichromat2\"       \"hcl_to_hsl\"       #> [5] \"none\"             \"rgb\"              \"rgb2\"             \"ryb\"              #> [9] \"ryb2\""},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Add colorjam chroma/luminance step — add_colorjam_step","title":"Add colorjam chroma/luminance step — add_colorjam_step","text":"Add colorjam chroma/luminance steps adjust series color hues visibly distinct categorical colors.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add colorjam chroma/luminance step — add_colorjam_step","text":"","code":"add_colorjam_step(step, step_list, verbose = TRUE, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add colorjam chroma/luminance step — add_colorjam_step","text":"step character string step name. step_list list elements \"C\" \"L\" contain numeric vector values range c(0, 100). future step_list may permit color channels, \"S\" \"L\" use HSL color space, \"S\" \"V\" use HSV color space. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add colorjam chroma/luminance step — add_colorjam_step","text":"TRUE, invisibly.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/add_colorjam_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add colorjam chroma/luminance step — add_colorjam_step","text":"","code":"colorjam_steps() #> [1] \"v19\" \"v20\" \"v23\" \"v24\" colorjam_steps(\"v24\") #> $C #> [1]  88 110  99  80 105  97 #>  #> $L #>  [1] 80 51 65 58 76 62 84 55 71 61 82 66 90 45 61 53 71 58 #>   Cvals <- c(110, 88, 99,  80, 105, 97) Lvals <- c(51, 82, 70, 60, 77, 65) add_colorjam_step(\"new_v24\", step_list=list(C=Cvals, L=Lvals)) #> ℹ added step 'new_v24'. colorjam_steps() #> [1] \"new_v24\" \"v19\"     \"v20\"     \"v23\"     \"v24\"     colorjam_steps(\"new_v24\") #> $C #> [1] 110  88  99  80 105  97 #>  #> $L #> [1] 51 82 70 60 77 65 #>   color_pie(rainbowJam(n=10,    step=\"new_v24\",    phase=c(2,1,3,4,5,6)))   add_colorjam_step(\"new_v24\", step_list=NULL) #> Warning: object 'step' not found #> ℹ removed step 'new_v24'. colorjam_steps() #> [1] \"new_v24\" \"v19\"     \"v20\"     \"v23\"     \"v24\""},{"path":"https://jmw86069.github.io/colorjam/reference/adjust_hue_warp.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the color hue warp effect — adjust_hue_warp","title":"Adjust the color hue warp effect — adjust_hue_warp","text":"Adjust color hue warp effect, experimental","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/adjust_hue_warp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the color hue warp effect — adjust_hue_warp","text":"","code":"adjust_hue_warp(   h1 = NULL,   h2 = NULL,   direction = NULL,   preset = getOption(\"colorjam.preset\", \"custom\"),   h1_shift = 0,   h2_shift = 0,   reverse_h2 = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/adjust_hue_warp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the color hue warp effect — adjust_hue_warp","text":"h1, h2 numeric NULL preset character string used define h1 h2 values defined specifically. h1_shift numeric angle degrees shift h1 hue. recommended shift h2 h1. h2_shift numeric angle degrees shift h2 hue. recommended shift h2 h1. reverse_h2 logical indicating whether reverse order values h2. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/adjust_hue_warp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust the color hue warp effect — adjust_hue_warp","text":"list color warp angles elements \"h1\" \"h2\", suitable use h2hw() hw2h().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/adjust_hue_warp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust the color hue warp effect — adjust_hue_warp","text":"function currently tested approach adjust position order warp color hues. example, initial use case \"rotate\" color wheel starting color always red. Also, color wheel can reversed color sequence reversed.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/adjust_hue_warp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust the color hue warp effect — adjust_hue_warp","text":"","code":"new_h1h2 <- adjust_hue_warp(preset=\"dichromat\", h2_shift=0, reverse_h2=FALSE) add_colorjam_preset(\"temp\", h1=new_h1h2$h1, h2=new_h1h2$h2) #> ℹ added preset 'temp'. rj_0 <- rainbowJam(n=24, preset=\"temp\", step=\"v23\") color_pie(rj_0, radius=1,    main=\"dichromat color wheel\\nstep='v23'\")   rj_0 <- rainbowJam(n=24, preset=\"temp\", step=\"v23\", phase=c(1,2,4,3,6,5)) color_pie(rj_0, radius=1,    main=\"dichromat color wheel\\nstep='v23'\\ncustom phase\")   n <- 24; new_h1h2 <- adjust_hue_warp(preset=\"dichromat\", h2_shift=-120, reverse_h2=FALSE) add_colorjam_preset(\"temp\", h1=new_h1h2$h1, h2=new_h1h2$h2, direction=1) #> ℹ added preset 'temp'. rj_120 <- rainbowJam(n=n, preset=\"temp\", step=\"v23\",    nameStyle=\"n\") color_pie(rj_120, radius=1,    main=\"dichromat color wheel rotated -120 degrees\\nstep='v23'\")   new_h1h2 <- adjust_hue_warp(preset=\"dichromat\", h2_shift=0, reverse_h2=TRUE) add_colorjam_preset(\"temp\", h1=new_h1h2$h1, h2=new_h1h2$h2,    direction=new_h1h2$direction) #> ℹ added preset 'temp'. rj_0rev <- rainbowJam(n=n, preset=\"temp\", step=\"v23\") names(rj_0rev) <- seq_len(n) color_pie(rj_0rev, radius=1, main=\"dichromat color wheel (reversed)\")   new_h1h2 <- adjust_hue_warp(preset=\"dichromat\", h2_shift=90, reverse_h2=FALSE) add_colorjam_preset(\"temp\", h1=new_h1h2$h1, h2=new_h1h2$h2,    direction=new_h1h2$direction) #> ℹ added preset 'temp'. rj_90 <- rainbowJam(n=n, preset=\"temp\", step='v23') color_pie(rj_90, radius=1,    main=\"color wheel rotated 90 degrees\\nstep='v23'\")   # RGB rotated to start at yellow, then red, then blue new_h1h2 <- adjust_hue_warp(preset=\"rgb\", h2_shift=-70, reverse_h2=TRUE) add_colorjam_preset(\"temp\", h1=new_h1h2$h1, h2=new_h1h2$h2,    direction=new_h1h2$direction) #> ℹ added preset 'temp'. n <- 10 rgb_rev <- rainbowJam(n=n,    preset=\"temp\", step='v24') color_pie(rgb_rev,    main=\"RGB color wheel rotated -30 degrees (reversed)\\nstep='v24'\")   # same as above except using ryb3 ryb_h1h2 <- adjust_hue_warp(preset=\"ryb\", h2_shift=-110, reverse_h2=TRUE) add_colorjam_preset(\"temp\", h1=ryb_h1h2$h1, h2=ryb_h1h2$h2,    direction=new_h1h2$direction) #> ℹ added preset 'temp'. n <- 10 ryb_rev <- rainbowJam(n=n,    #phase=c(1,4,5,2,6,3),    preset=\"temp\", step='v24') color_pie(ryb_rev,    main=\"RYB color wheel rotated -110 degrees (reversed)\\nstep='v24'\")   # remove \"temp\" preset add_colorjam_preset(preset=\"temp\", h1=NULL) #> Warning: object 'preset' not found #> ℹ removed preset 'temp'."},{"path":"https://jmw86069.github.io/colorjam/reference/approx_degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolation for degree angles — approx_degrees","title":"Interpolation for degree angles — approx_degrees","text":"Interpolation degree angles","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/approx_degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolation for degree angles — approx_degrees","text":"","code":"approx_degrees(   h1,   h2,   h = NULL,   preset = \"custom\",   direction = 1,   digits = 10,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/approx_degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolation for degree angles — approx_degrees","text":"h1 numeric vector degree angles, represent \"degree angles \". h2 numeric vector degree angles, represent \"degree angles \". h numeric NULL, numeric vector vector degree angles \"\" converted corresponding interpolated angle \"\", h NULL object returned function called convert numeric vector \"\" degree angles \"\". digits integer value indicating number digits precision use input h1 h2 degree angles, used confining 360 degrees h1 %% 360, step sometimes produces slight variations equivalent values. example ((12.2 %% 360) == (372.2 %% 360)) TRUE without rounding 13 fewer digits. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/approx_degrees.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpolation for degree angles — approx_degrees","text":"function analogous stats::approx() except special case degree angles. case, degrees confined range [0, 360], angle smoothly interpolated around degrees circle. function work properly even degree angles h2 reversed, offset. implicit requirement angles \"\" mapped one one angle \"\".","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/approx_degrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolation for degree angles — approx_degrees","text":"","code":"h_colors <- jamba::getColorRamp(c(\"white\", \"firebrick\"), n=35, trimRamp=c(1, 0));  h1 <- c(12.2, 27.3, 47.0, 66.5, 85.9, 106.3, 131.7,    223.1, 263.2, 277.2, 307.7, 345.3, 372.2) h2 <- seq(from=0, to=360, length.out=13) h_from <- seq(from=0, to=360, length.out=36)[-36] h_to <- approx_degrees(h1, h2, h_from) par(\"mfrow\"=c(2, 2)) display_degrees(h_from, col=h_colors) display_degrees(h_to, col=h_colors) plot(h_from, h_to, pch=20, col=h_colors) par(\"mfrow\"=c(1, 1))   h2 <- c(12.2, 27.3, 47.0, 66.5, 85.9, 106.3, 131.7,    223.1, 263.2, 277.2, 307.7, 345.3, 372.2) h1 <- seq(from=0, to=360, length.out=13) h_from <- seq(from=0, to=360, length.out=36)[-36] h_to2 <- approx_degrees(h2, h1, h_from) par(\"mfrow\"=c(2, 2)) display_degrees(h_from, col=h_colors) display_degrees(h_to2, col=h_colors) plot(h_from, h_to2, pch=20, col=h_colors) par(\"mfrow\"=c(1, 1))   h1 <- c(12.2, 27.3, 47.0, 66.5, 85.9, 106.3, 131.7,    223.1, 263.2, 277.2, 307.7, 345.3, 372.2) h2 <- rev((seq(from=0, to=360, length.out=13))[c(9:12,1:9)]) h_from <- seq(from=0, to=360, length.out=36)[-36] h_to <- approx_degrees(h1, h2, h_from) par(\"mfrow\"=c(2, 2)) display_degrees(h_from, col=h_colors) display_degrees(h_to, col=h_colors) plot(h_from, h_to, pch=20, col=h_colors) par(\"mfrow\"=c(1, 1))   # apply no transform approx_degrees(h1=0, h2=0, h=c(0, 90, 180, 270)) #> [1]   0  90 180 270  # apply 180 degree transform approx_degrees(h1=0, h2=180, h=c(0, 90, 180, 270)) #> [1] 180 270   0  90 approx_degrees(h1=180, h2=0, h=c(0, 90, 180, 270)) #> [1] 180 270   0  90  # flip the direction approx_degrees(h1=c(1, 360), h2=c(359, 0), h=c(0, 90, 180, 270)) #> [1]   0.0000 359.2479 359.4986 359.7493 approx_degrees(h1=c(1, 360), h2=c(359, 0)+90, h=c(0, 90, 180, 270)) #> [1] 90.00000 89.24791 89.49861 89.74930 approx_degrees(h1=c(1, 360)+90, h2=c(359, 0), h=c(0, 90, 180, 270)) #> [1] 359.7493   0.0000 359.2479 359.4986  # verify reverse h2 with break across 0-360 seq1 <- seq(from=0, to=330, by=30) seq2 <- (rev(seq1) + 120) %% 360 seq_out <- seq(from=0, to=350, by=10); approx_out <- approx_degrees(h1=seq1, h2=seq2, h=seq_out, verbose=TRUE) #> ##  (13:12:50) 11Dec2024:   approx_degrees(): h1h2_df, input:  #>     h1  h2 direction h1_diff h2_diff #> 4    0  90         1    -330     -30 #> 3   30  60         1      30     -30 #> 2   60  30         1      30     -30 #> 1   90   0         1      30     -30 #> 12 120 330         1      30     330 #> 11 150 300         1      30     -30 #> 10 180 270         1      30     -30 #> 9  210 240         1      30     -30 #> 8  240 210         1      30     -30 #> 7  270 180         1      30     -30 #> 6  300 150         1      30     -30 #> 5  330 120         1      30     -30 #> ##  (13:12:50) 11Dec2024:   approx_degrees(): direction:1  #> ##  (13:12:50) 11Dec2024:   approx_degrees(): which_flips:2,3,4,6,7,8,9,10,11,12  #> ##  (13:12:50) 11Dec2024:   approx_degrees(): correcting discontinuity in h2 angles crossing above 360  #> ##  (13:12:50) 11Dec2024:   approx_degrees(): h1h2_df, expanded:  #>     h1   h2 direction h1_diff h2_diff #> 4    0   90         1    -330     -30 #> 3   30  420         1      30     -30 #> 2   60  750         1      30     -30 #> 1   90 1080         1      30     -30 #> 12 120 1410         1      30     330 #> 11 150 1740         1      30     -30 #> 10 180 2070         1      30     -30 #> 9  210 2400         1      30     -30 #> 8  240 2730         1      30     -30 #> 7  270 3060         1      30     -30 #> 6  300 3390         1      30     -30 #> 5  330 3720         1      30     -30 #> ##  (13:12:50) 11Dec2024:   h1_min_span:0  #> ##  (13:12:50) 11Dec2024:   h1_max_span:360  #> ##  (13:12:50) 11Dec2024:   h1_range_span:360  #> ##  (13:12:50) 11Dec2024:   h2_min_span:0  #> ##  (13:12:50) 11Dec2024:   h2_max_span:3,960  #> ##  (13:12:50) 11Dec2024:   h2_range_span:3,960  #> ##  (13:12:50) 11Dec2024:   approx_degrees(): h1h2_df (expanded):  #>      h1   h2 direction h1_diff h2_diff #> 4     0   90         1      NA      NA #> 3    30  420         1      30     330 #> 2    60  750         1      30     330 #> 1    90 1080         1      30     330 #> 12  120 1410         1      30     330 #> 11  150 1740         1      30     330 #> 10  180 2070         1      30     330 #> 9   210 2400         1      30     330 #> 8   240 2730         1      30     330 #> 7   270 3060         1      30     330 #> 6   300 3390         1      30     330 #> 5   330 3720         1      30     330 #> 41  360  450         1      30   -3270 #> 31  390  780         1      30     330 #> 21  420 1110         1      30     330 #> 13  450 1440         1      30     330 #> 121 480 1770         1      30     330 #> 111 510 2100         1      30     330 #> 101 540 2430         1      30     330 #> 91  570 2760         1      30     330 #> 81  600 3090         1      30     330 #> 71  630 3420         1      30     330 #> 61  660 3750         1      30     330 #> 51  690 4080         1      30     330 plot(seq1, seq2, pch=20, col=\"blue\", asp=1, ylim=c(0, 360)) points(seq_out, approx_out, col=\"red\", add=TRUE, cex=2) #> Warning: \"add\" is not a graphical parameter   # verify forward h2 with break across 0-360 seq1 <- seq(from=0, to=330, by=30) seq2 <- (seq1 + 120) %% 360 seq_out <- seq(from=0, to=350, by=10); approx_out <- approx_degrees(h1=seq1, h2=seq2, h=seq_out, verbose=TRUE) #> ##  (13:12:50) 11Dec2024:   approx_degrees(): h1h2_df, input:  #>     h1  h2 direction h1_diff h2_diff #> 5    0 120         1    -330      30 #> 6   30 150         1      30      30 #> 7   60 180         1      30      30 #> 8   90 210         1      30      30 #> 9  120 240         1      30      30 #> 10 150 270         1      30      30 #> 11 180 300         1      30      30 #> 12 210 330         1      30      30 #> 1  240   0         1      30    -330 #> 2  270  30         1      30      30 #> 3  300  60         1      30      30 #> 4  330  90         1      30      30 #> ##  (13:12:50) 11Dec2024:   approx_degrees(): direction:1  #> ##  (13:12:50) 11Dec2024:   approx_degrees(): which_flips:9  #> ##  (13:12:50) 11Dec2024:   approx_degrees(): correcting discontinuity in h2 angles crossing above 360  #> ##  (13:12:50) 11Dec2024:   approx_degrees(): h1h2_df, expanded:  #>     h1  h2 direction h1_diff h2_diff #> 5    0 120         1    -330      30 #> 6   30 150         1      30      30 #> 7   60 180         1      30      30 #> 8   90 210         1      30      30 #> 9  120 240         1      30      30 #> 10 150 270         1      30      30 #> 11 180 300         1      30      30 #> 12 210 330         1      30      30 #> 1  240 360         1      30    -330 #> 2  270 390         1      30      30 #> 3  300 420         1      30      30 #> 4  330 450         1      30      30 #> ##  (13:12:50) 11Dec2024:   h1_min_span:0  #> ##  (13:12:50) 11Dec2024:   h1_max_span:360  #> ##  (13:12:50) 11Dec2024:   h1_range_span:360  #> ##  (13:12:50) 11Dec2024:   h2_min_span:0  #> ##  (13:12:50) 11Dec2024:   h2_max_span:720  #> ##  (13:12:51) 11Dec2024:   h2_range_span:720  #> ##  (13:12:51) 11Dec2024:   approx_degrees(): h1h2_df (expanded):  #>      h1  h2 direction h1_diff h2_diff #> 5     0 120         1      NA      NA #> 6    30 150         1      30      30 #> 7    60 180         1      30      30 #> 8    90 210         1      30      30 #> 9   120 240         1      30      30 #> 10  150 270         1      30      30 #> 11  180 300         1      30      30 #> 12  210 330         1      30      30 #> 1   240 360         1      30      30 #> 2   270 390         1      30      30 #> 3   300 420         1      30      30 #> 4   330 450         1      30      30 #> 51  360 480         1      30      30 #> 61  390 510         1      30      30 #> 71  420 540         1      30      30 #> 81  450 570         1      30      30 #> 91  480 600         1      30      30 #> 101 510 630         1      30      30 #> 111 540 660         1      30      30 #> 121 570 690         1      30      30 #> 13  600 720         1      30      30 #> 21  630 750         1      30      30 #> 31  660 780         1      30      30 #> 41  690 810         1      30      30 plot(seq1, seq2, pch=20, col=\"blue\", asp=1, ylim=c(0, 360)) points(seq_out, approx_out, col=\"red\", add=TRUE, cex=2) #> Warning: \"add\" is not a graphical parameter   new_h1h2 <- adjust_hue_warp(preset=\"dichromat\", h2_shift=15, reverse_h2=TRUE) hseq <- seq(from=0, to=350, by=15); approx_degrees(h2=new_h1h2$h1, h1=new_h1h2$h2, h=hseq, verbose=FALSE) #>  [1]  26.60759  81.16162 198.58586 293.17607 336.14153  19.10699  62.07245 #>  [8] 105.03791 148.00337 190.96883 233.93429 274.48661 311.31696 348.14732 #> [15]  24.97768  61.80804 291.89394 348.71212  47.51960 111.61568 175.71176 #> [22] 239.80784 303.90392   8.00000"},{"path":"https://jmw86069.github.io/colorjam/reference/blend_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Blend multiple colors — blend_colors","title":"Blend multiple colors — blend_colors","text":"Blend multiple colors","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/blend_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blend multiple colors — blend_colors","text":"","code":"blend_colors(   x,   preset = c(\"ryb\", \"none\", \"dichromat\", \"rgb\", colorjam_presets()),   h1 = NULL,   h2 = NULL,   do_plot = FALSE,   lens = 0,   c_weight = 0.2,   c_floor = 12,   apply_alpha = FALSE,   flatten_alpha = FALSE,   bg = NULL,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/blend_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blend multiple colors — blend_colors","text":"x character vector R colors hex format, list color vectors, vector independently blended. preset character value indicating color wheel preset, default \"ryb\" red-yellow-blue paint-like color blending. passed colorjam::h2hwOptions(), permits value returned colorjam_presets(). do_plot logical indicating whether depict color blend operation using jamba::showColors(). lens numeric value used influence color saturation averaging color wheel angles. c_weight numeric value used weight average color chroma (saturation) using mean chroma values input colors. c_weight=0 chroma uses radius returned mean color wheel angle. c_floor numeric value indicating C chroma HCL value color considered \"grey\" unsaturated. happens, hue contribution set 0.001 relative colors blended. correction done every color assigned one H hue value HCL, even C chroma (saturation) zero, therefore colors effectively H hue. apply_alpha logical default TRUE, whether apply alpha transparency output color. words, input colors transparent, output also contain transparency apply_alpha=TRUE. flatten_alpha logical default FALSE, whether \"flatten\" color transparency blending current background color, defined bg. argument used apply_alpha=TRUE. bg character default NULL, used define default background color, used flatten_alpha=TRUE. NULL, checks open graphics device dev.list() open open uses par(\"bg\"). However graphics device open, call par(\"bg\") open new graphics device. Therefore graphics device open, NULL converted \"white\" background. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/blend_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blend multiple colors — blend_colors","text":"character vector blended color; input x list returned vector length length(x).","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/blend_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blend multiple colors — blend_colors","text":"function intended blend two colors, default using \"paint mixing\" style, similar subtractive color mixing. accomplishes goal using red-yellow-blue color wheel (similar cyan-yellow-magenta), determines average color hue appropriate loss color saturation. process creates unit vector color, whose length scaled relative saturation alpha transparency, maximum length=1. average angle unit vectors used final color hue, distance origin used derive new color chroma (similar saturation). end goal blue-yellow make green, blue-red make purple, red-yellow make orange. Current RGB color blending fails least one criteria. approach enables blending two colors, fairly unique color functions R. Note approach, used blend multiple different colors, tends \"muddy\" output color, similar using finger paints. Eventually add enough colors, turns \"bleh\".","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/blend_colors.html","id":"new-transparency-arguments-in-","dir":"Reference","previous_headings":"","what":"New transparency arguments in 0.0.30.900","title":"Blend multiple colors — blend_colors","text":"apply_alpha=TRUE return color appropriate alpha transparency based upon input colors. example, blending red red always produce red. However, blending 50% transparent red 50% transparent red produce 75% transparent red. effect, redness build layers transparent red. flatten_alpha=TRUE (default FALSE) flatten transparent blended color background, useful situations alpha transparency ignored. words, 34% transparent red flattened \"#FFAAAAFF\" appear nearly identical \"#FF000057\" R plots. color wheel red-yellow-blue, subtractive color mixing can blend two colors accounts transparency individual colors basic design guide meet expectations: red + yellow = orange blue + yellow = green red + blue = purple blue + red + yellow = brown/gray substance input x can vector colors, list. x list unique vectors blended, returning vector length length(x). default additive color mixing, red-green-blue colors used electronic monitors, meet criteria. (logical paint mixing exercise someone expect mixing red green make yellow; blue yellow make grey.) general function performs well, exceptions color hue angle well-normalized opposite complementary color, therefore make expected \"brownish/grey\" output. Examples include blend_colors(c(\"yellow\", \"purple\")) closer blue + yellow = green, purple also composed blue red. Indeed, R color hue purple 283; hue blue 266; hue red 12 (372); means purple substantially closer blue red. suitable workaround case use blend_colors(c(\"yellow\", \"deeppink4\")).","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/blend_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blend multiple colors — blend_colors","text":"","code":"blend_colors(c(\"red\", \"yellow\"), do_plot=TRUE)  #> [1] \"#E9AC7EFF\"  blend_colors(c(\"blue\", \"gold\"), do_plot=TRUE)  #> [1] \"#10A376FF\"  blend_colors(c(\"dodgerblue\", \"firebrick2\"), do_plot=TRUE)  #> [1] \"#CC57C3FF\"  blend_colors(c(\"green\", \"dodgerblue\"), do_plot=TRUE)  #> [1] \"#00D8DDFF\"  blend_colors(c(\"red\", \"gold\", \"blue\"), do_plot=TRUE)  #> [1] \"#B07A9BFF\"  blend_colors(c(\"deeppink2\", \"yellow\"), do_plot=TRUE)  #> [1] \"#D5B09EFF\"  blend_colors(c(\"blue4\", \"darkorange1\"), do_plot=TRUE)  #> [1] \"#8D4B69FF\"  blend_colors(c(\"#FF000040\", \"#FF000080\"), do_plot=TRUE) #> [1] \"#FF0000FF\" title(main=paste0(\"blend identical transparent colors\\n\",    \"returning transparent colors\\n\"))   blend_colors(c(\"#FF000040\", \"#FF000080\"), do_plot=TRUE, flatten_alpha=TRUE) #> [1] \"#FF0000FF\" title(main=paste0(\"blend identical transparent colors\\n\",    \"then flatten alpha transparency\\n(same visual result)\"))   blend_colors(list(c(\"red\", \"yellow\"), c(\"blue\", \"gold\")), do_plot=FALSE) #> [1] \"#E9AC7EFF\" \"#10A376FF\""},{"path":"https://jmw86069.github.io/colorjam/reference/closestRcolor.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the closest R color — closestRcolor","title":"Find the closest R color — closestRcolor","text":"Find closest R color vector colors","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/closestRcolor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the closest R color — closestRcolor","text":"","code":"closestRcolor(   x,   colorSet = colors(),   C_min = Cgrey,   Cgrey = getOption(\"jam.Cgrey\", 5),   showPalette = FALSE,   colorModel = c(\"hcl\", \"LUV\"),   Hwt = 2.5,   Cwt = 1,   Lwt = 4,   warpHue = TRUE,   preset = \"ryb\",   method = \"maximum\",   returnType = c(\"color\", \"name\", \"match\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/closestRcolor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the closest R color — closestRcolor","text":"x character vector colors, either hex format valid color R. colorSet character vector colors, default includes R colors grDevices::colors(). C_min, Cgrey numeric minimum color Chroma filter applied handle greyscale colors. practical cases C_min Cgrey value. Note Cgrey used option jamba::make_styles(), jamba::applyCLrange() similar use cases, used well: getOption(\"jamba.Cgrey\", 5). C_min applied colorSet require closest matching color least color Chroma (saturation). Cgrey applied x determine input color considered greyscale, case matched saturated colors since reliable color hue. Instead, subset colorSet Chroma C_min used color-matching. Reworded short: Colors x Chroma Cgrey matched colors colorSet Chroma C_min. Colors x Chroma Cgrey matched colors colorSet Chroma C_min. end result saturated input colors match saturated reference colors, unsaturated input colors match unsaturated reference colors. Cgrey numeric color Chroma input color x considered \"grey\" (\"gray\"), therefore color hue longer matched. showPalette logical indicating whether display input colors resulting closest matching colors using jamba::showColors(). colorModel character color model use: \"hcl\": default, uses HCL provided jamba::col2hcl() uses equivalent colorspace::polarLUV() considers color hues terms 360 degree angles along color wheel. \"LUV\": uses CIELUV color space, provided colorspace::LUV() encodes angular color hue 3-D Cartesian space, allowing comparisons using Euclidean distance. Hwt, Cwt, Lwt numeric relative weights dimension HCL colors, H, C, L channels, respectively. warpHue logical indicating whether perform hue warp operation using h2hw() improves ability match colors orange green. preset character string define color wheel used matching input colors x colors colorSet. preset used h2hw() hw2h(). default preset=\"ryb\" allows greatest distinction colors without imposing additional restrictions preset=\"dichromat\" match color-safe colors. purpose identify label colors based upon reference set colors. method character string passed stats::dist(). default method=\"maximum\" works well colorModel=\"hcl\", assigns distance using largest distance across three color coordinates H, C, L. requires best overall match across three coordinates rather weighted combination coordinate distances. methods testing allowed matches different color hues luminance chroma values similar.  colorModel=\"LUV\" recommend using method=\"euclidean\", seems work well projected color coordinates L, U, V. U, V coordinates roughly angular color hue projected flat plane, L describing Luminance. returnType character type data return: \"color\" returns color values colorSet, default color names grDevices::colors() \"name\" returns names(colorSet) exist, otherwise values colorSet \"match\" returns integer vector index colorSet verbose logical whether print verbose output.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/closestRcolor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the closest R color — closestRcolor","text":"character vector colors, optionally customized argument returnType.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/closestRcolor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the closest R color — closestRcolor","text":"function intended relatively efficient method compare set colors named R colors provided grDevices::colors(). Color matching provides substantial improvements similar functions R packages. Notably, colors matched using either HCL LUB color model default, provide vast improvement RGB color matching, due better spacing colors, increased resolution color hue. colorModel=\"HCL\" coordinates weighted prioritize matching color Hue Chroma Luminance. distance method default uses method=\"maximum\" also emphasizes lowest distance three dimensions.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/closestRcolor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the closest R color — closestRcolor","text":"","code":"closestRcolor(rainbowJam(12), showPalette=TRUE);  #>  [1] \"gold2\"          \"tan4\"           \"tan2\"           \"salmon3\"        #>  [5] \"lightcoral\"     \"palevioletred2\" \"plum2\"          \"lightslateblue\" #>  [9] \"mediumpurple1\"  \"cornflowerblue\" \"skyblue1\"       \"steelblue2\""},{"path":"https://jmw86069.github.io/colorjam/reference/closest_named_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Closest colorjam named_colors — closest_named_color","title":"Closest colorjam named_colors — closest_named_color","text":"Closest colorjam named_colors vector colors","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/closest_named_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closest colorjam named_colors — closest_named_color","text":"","code":"closest_named_color(   x,   colorSet = colorjam::named_colors,   C_min = Cgrey,   Cgrey = getOption(\"jam.Cgrey\", 5),   showPalette = FALSE,   colorModel = c(\"hcl\", \"LUV\"),   Hwt = 2.5,   Cwt = 1,   Lwt = 4,   warpHue = TRUE,   preset = \"ryb\",   method = \"maximum\",   returnType = c(\"color\", \"name\", \"match\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/closest_named_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closest colorjam named_colors — closest_named_color","text":"x character vector colors, either hex format valid color R. colorSet character vector colors, default named_colors provides 4,447 total hex colors, human-assigned color name. colors also include hex colors R colors() already included reference colors. C_min, Cgrey numeric minimum color Chroma filter applied handle greyscale colors. practical cases C_min Cgrey value. Note Cgrey used option jamba::make_styles(), jamba::applyCLrange() similar use cases, used well: getOption(\"jamba.Cgrey\", 5). C_min applied colorSet require closest matching color least color Chroma (saturation). Cgrey applied x determine input color considered greyscale, case matched saturated colors since reliable color hue. Instead, subset colorSet Chroma C_min used color-matching. Reworded short: Colors x Chroma Cgrey matched colors colorSet Chroma C_min. Colors x Chroma Cgrey matched colors colorSet Chroma C_min. end result saturated input colors match saturated reference colors, unsaturated input colors match unsaturated reference colors. showPalette logical indicating whether display input colors resulting closest matching colors using jamba::showColors(). colorModel character color model use: \"hcl\": default, uses HCL provided jamba::col2hcl() uses equivalent colorspace::polarLUV() considers color hues terms 360 degree angles along color wheel. \"LUV\": uses CIELUV color space, provided colorspace::LUV() encodes angular color hue 3-D Cartesian space, allowing comparisons using Euclidean distance. Hwt, Cwt, Lwt numeric relative weights dimension HCL colors, H, C, L channels, respectively. warpHue logical indicating whether perform hue warp operation using h2hw() improves ability match colors orange green. preset character string define color wheel used matching input colors x colors colorSet. preset used h2hw() hw2h(). default preset=\"ryb\" allows greatest distinction colors without imposing additional restrictions preset=\"dichromat\" match color-safe colors. purpose identify label colors based upon reference set colors. method character string passed stats::dist(). default method=\"maximum\" works well colorModel=\"hcl\", assigns distance using largest distance across three color coordinates H, C, L. requires best overall match across three coordinates rather weighted combination coordinate distances. methods testing allowed matches different color hues luminance chroma values similar.  colorModel=\"LUV\" recommend using method=\"euclidean\", seems work well projected color coordinates L, U, V. U, V coordinates roughly angular color hue projected flat plane, L describing Luminance. returnType character type data return: \"color\" returns color values colorSet, default color names grDevices::colors() \"name\" returns names(colorSet) exist, otherwise values colorSet \"match\" returns integer vector index colorSet verbose logical whether print verbose output.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/col_div_xf.html","id":null,"dir":"Reference","previous_headings":"","what":"Divergent color interpolation function with adjustable range and floor — col_div_xf","title":"Divergent color interpolation function with adjustable range and floor — col_div_xf","text":"Divergent color interpolation function adjustable range optional color floor","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/col_div_xf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divergent color interpolation function with adjustable range and floor — col_div_xf","text":"","code":"col_div_xf(   x = 1,   floor = 0,   lens = 0,   n = 15,   colramp = \"RdBu_r\",   open_floor = FALSE,   debug = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/col_div_xf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divergent color interpolation function with adjustable range and floor — col_div_xf","text":"x numeric value used threshold, numeric values value x assigned last color color gradient. Negative values negative value -x assigned first color color gradient. floor numeric optional value numeric values -x x assigned middle color color gradient. Note values exactly x -x assigned next respective color away middle color. floor=0 floor=NULL floor applied, colors assigned using continuous range numeric values -x x length n. lens numeric value indicating color lens applied color gradient, passed jamba::getColorRamp(). Lens values lens > 0 condense color gradient, making smaller changes visually distinct; lens < 0 expands color gradient, making smaller changes less visually distinct. n integer number colors used initial color gradient. value forced odd number, \"middle color\" always represented one strict color. Note using floor, first non-middle color used floor assignment means smaller n value assign visibly distinct color using larger n. See examples. colramp character passed jamba::getColorRamp() recognizes one several forms input: character string matching name color ramp RColorBrewer (see divergent palettes RColorBrewer::display.brewer.(type=\"div\")). Note adding \"_r\" reverse color gradient, default \"BuRd_r\" create color gradient \"blue-white-red\" - red high values consistent \"heat\" \"heatmaps\" - heat red. character vector R colors, define specific color ramp. vector expanded n length. open_floor logical indicating whether colors assigned floor still receive non-middle color. Setting open_floor=TRUE best method compare effect assigning strict middle-color values floor, versus using gradient colors floor, remaining numeric-color assignments held constant. debug logical indicating whether produce plot shows resulting color gradient. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/col_div_xf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divergent color interpolation function with adjustable range and floor — col_div_xf","text":"function maps vector numeric values R colors using divergent color gradient numeric thresholds defined.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/col_div_xf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Divergent color interpolation function with adjustable range and floor — col_div_xf","text":"function intended extend useful function circlize::colorRamp2() takes numeric vector breaks, character vector R colors, returns function maps numeric values R colors using interpolated color gradient. function intended specific cases using divergent color gradient, function assumes colors mapped positive negative numeric values centered zero. driving use case ComplexHeatmap::Heatmap(), argument col contains color function produced circlize::colorRamp2() color vector. However, supplying divergent color vector, colors applied symmetrically zero.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/col_div_xf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divergent color interpolation function with adjustable range and floor — col_div_xf","text":"","code":"col_fn1 <- col_div_xf(x=3, floor=0, n=21) col_fn2 <- col_div_xf(x=3, floor=1, n=13) col_fn3 <- col_div_xf(x=3, floor=1, n=9) col_fn4 <- col_div_xf(x=3, floor=1, n=5)  col_fn2o <- col_div_xf(x=3, floor=1, n=13, open_floor=TRUE) col_fn3o <- col_div_xf(x=3, floor=1, n=9, open_floor=TRUE) col_fn4o <- col_div_xf(x=3, floor=1, n=5, open_floor=TRUE)  test_seq <- seq(from=-3, to=3, by=0.05); names(test_seq) <- round(test_seq, digits=2);  opar <- par(\"mfrow\"=c(1, 1)); bp0 <- barplot(abs(test_seq),    las=2, yaxt=\"n\",    main=\"floor=0\",    col=col_fn1(test_seq),    border=\"#22222222\") abline(v=bp0[abs(test_seq) == 1,], lty=\"dashed\")  bp1 <- barplot(abs(test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\",    col=col_fn2(test_seq),    border=\"#22222222\") abline(v=bp1[abs(test_seq) == 1,], lty=\"dashed\")  bp2 <- barplot(abs(test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nopen_floor=TRUE\",    col=col_fn2o(test_seq),    border=\"#22222222\") abline(v=bp2[abs(test_seq) == 1,], lty=\"dashed\")  par(opar)  test_seq <- seq(from=-3, to=3, by=0.5); names(test_seq) <- round(test_seq, digits=2); test_seq <- c(test_seq,    `-0.999`=-0.999,    `0.999`=0.999); test_seq <- test_seq[order(test_seq)]  opar <- par(\"mfrow\"=c(1, 2)); bp1 <- barplot((test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nn=19\",    col=col_fn2(test_seq),    border=\"#22222244\") abline(v=bp1[abs(test_seq) == 1,], lty=\"dashed\") bp2 <- barplot((test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nn=19\\nopen_floor=TRUE\",    col=col_fn2o(test_seq),    border=\"#22222244\") abline(v=bp2[abs(test_seq) == 1,], lty=\"dashed\")  bp3 <- barplot((test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nn=9\",    col=col_fn3(test_seq),    border=\"#22222244\") abline(v=bp3[abs(test_seq) == 1,], lty=\"dashed\") bp3 <- barplot((test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nn=9\\nopen_floor=TRUE\",    col=col_fn3o(test_seq),    border=\"#22222244\") abline(v=bp3[abs(test_seq) == 1,], lty=\"dashed\")  bp4 <- barplot((test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nn=5\",    col=col_fn4(test_seq),    border=\"#22222244\") abline(v=bp4[abs(test_seq) == 1,], lty=\"dashed\") bp4 <- barplot((test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nn=5\\nopen_floor=TRUE\",    col=col_fn4o(test_seq),    border=\"#22222244\") abline(v=bp4[abs(test_seq) == 1,], lty=\"dashed\")  par(opar)"},{"path":"https://jmw86069.github.io/colorjam/reference/col_linear_xf.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear color interpolation function with adjustable range, baseline, and floor — col_linear_xf","title":"Linear color interpolation function with adjustable range, baseline, and floor — col_linear_xf","text":"Linear color interpolation function adjustable range, baseline, floor","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/col_linear_xf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear color interpolation function with adjustable range, baseline, and floor — col_linear_xf","text":"","code":"col_linear_xf(   x = 1,   floor = 0,   baseline = 0,   lens = 0,   n = 6,   colramp = \"Purples\",   open_floor = FALSE,   debug = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/col_linear_xf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear color interpolation function with adjustable range, baseline, and floor — col_linear_xf","text":"x numeric value used threshold, numeric values value x assigned last color color gradient. Negative values negative value -x assigned first color color gradient. floor numeric optional value numeric values -x x assigned middle color color gradient. Note values exactly x -x assigned next respective color away middle color. floor=0 floor=NULL floor applied, colors assigned using continuous range numeric values -x x length n. baseline numeric value define baseline value, used zero initial value. Note baseline can either higher lower x, colors colramp applied starting baseline x. lens numeric value indicating color lens applied color gradient, passed jamba::getColorRamp(). Lens values lens > 0 condense color gradient, making smaller changes visually distinct; lens < 0 expands color gradient, making smaller changes less visually distinct. n integer number colors used initial color gradient. value forced odd number, \"middle color\" always represented one strict color. Note using floor, first non-middle color used floor assignment means smaller n value assign visibly distinct color using larger n. See examples. colramp character passed jamba::getColorRamp() recognizes one several forms input: character string matching name color ramp RColorBrewer (see divergent palettes RColorBrewer::display.brewer.(type=\"div\")). Note adding \"_r\" reverse color gradient, default \"BuRd_r\" create color gradient \"blue-white-red\" - red high values consistent \"heat\" \"heatmaps\" - heat red. character vector R colors, define specific color ramp. vector expanded n length. open_floor logical indicating whether colors assigned floor still receive non-middle color. Setting open_floor=TRUE best method compare effect assigning strict middle-color values floor, versus using gradient colors floor, remaining numeric-color assignments held constant. debug logical indicating whether produce plot shows resulting color gradient. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/col_linear_xf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear color interpolation function with adjustable range, baseline, and floor — col_linear_xf","text":"function linear equivalent col_div_xf(), takes linear/sequential color gradient instead divergent color gradient.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/col_linear_xf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear color interpolation function with adjustable range, baseline, and floor — col_linear_xf","text":"","code":"col_fn1 <- col_linear_xf(x=3, baseline=0, floor=0) col_fn2 <- col_linear_xf(x=3, baseline=0, floor=1)  col_fn2o <- col_linear_xf(x=3, baseline=0, floor=1, open_floor=TRUE)  test_seq <- seq(from=0, to=3, by=0.05); names(test_seq) <- round(test_seq, digits=2);  opar <- par(\"mfrow\"=c(1, 1)); bp0 <- barplot(abs(test_seq),    las=2, yaxt=\"n\",    main=\"floor=0\",    col=col_fn1(test_seq),    border=\"#22222222\") abline(v=bp0[abs(test_seq) == 1,], lty=\"dashed\")  bp1 <- barplot(abs(test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\",    col=col_fn2(test_seq),    border=\"#22222222\") abline(v=bp1[abs(test_seq) == 1,], lty=\"dashed\")  bp2 <- barplot(abs(test_seq),    las=2, yaxt=\"n\",    main=\"floor=1\\nopen_floor=TRUE\",    col=col_fn2o(test_seq),    border=\"#22222222\") abline(v=bp2[abs(test_seq) == 1,], lty=\"dashed\")  par(opar)  col_fn3 <- col_linear_xf(x=3, baseline=6, floor=5) test_seq <- seq(from=0, to=7, by=0.1); names(test_seq) <- round(test_seq, digits=2); bp3 <- barplot(abs(test_seq),    las=2, yaxt=\"n\",    main=\"baseline=6, x=3, floor=5\",    col=col_fn3(test_seq),    border=\"#22222222\") abline(v=bp3[abs(test_seq) == 5,], lty=\"dashed\") abline(v=bp3[abs(test_seq) == 3,], lty=\"dashed\")   # Optionally show how to display data and legend in ComplexHeatmap if (jamba::check_pkg_installed(\"ComplexHeatmap\")) {    set.seed(123);    m <- abs(matrix(ncol=9, rnorm(81) * 8));    col1 <- col_linear_xf(14, floor=4, n=8, lens=2);    hm_1 <- ComplexHeatmap::Heatmap(m, col=col1,       cell_fun=jamba::cell_fun_label(m=m, col_hm=col1),       heatmap_legend_param=list(          color_bar=\"discrete\",          at=c(0, 2, 3.99, 4, 6, 8, 10, 12, 14),          border=TRUE),       column_title=\"col_linear_xf(14, floor=4)\",       name=\"color key 1\",       border=TRUE);     col2 <- col_linear_xf(14, floor=4, n=8, lens=2, open_floor=TRUE);    hm_2 <- ComplexHeatmap::Heatmap(m,       col=col2,       cell_fun=jamba::cell_fun_label(m=m, col_hm=col2),       heatmap_legend_param=list(          color_bar=\"discrete\",          at=c(0, 2, 3.99, 4, 6, 8, 10, 12, 14),          border=TRUE),       column_title=\"col_linear_xf(14, floor=4, open_floor=TRUE)\",       name=\"color key 2\",       border=TRUE);    hm_1 + hm_2 }"},{"path":"https://jmw86069.github.io/colorjam/reference/color_complement.html","id":null,"dir":"Reference","previous_headings":"","what":"Create color complement by rotating the color hue — color_complement","title":"Create color complement by rotating the color hue — color_complement","text":"Create color complement rotating color hue","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/color_complement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create color complement by rotating the color hue — color_complement","text":"","code":"color_complement(   color,   Hflip = 180,   Cfloor = NULL,   Crange = c(5, 100),   Lrange = c(10, 95),   Cgrey = getOption(\"jam.Cgrey\", 5),   preset = getOption(\"colorjam.preset\", \"dichromat\"),   useWarpHue = TRUE,   use_hsl = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/color_complement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create color complement by rotating the color hue — color_complement","text":"color character vector R compatible colors. Hflip numeric value degrees (0 360) added color hue produce final color hue. Typically 180 degrees select color opposite input color virtual color wheel. Note warpHue=TRUE also enables customized color wheel. Cfloor numeric deprecated favor Crange, however Cfloor provided, given priority Crange. value used limit output chroma C values minimum value, ensure minimum color saturation. Crange numeric vector permitted range output color chroma C values. supplied, output values forced range scaling intermediate values. Note input colors chroma Cgrey considered greyscale complemented. Lrange numeric vector permitted range output luminance L values. supplied, output values simply forced range scaling intermediate values. Cgrey numeric color chroma, color considered greyscale, therefore color hue relevant, Crange applied. useWarpHue logical indicating whether use warp hue functions colorjam::h2hw() colorjam::hw2h() effectively change color wheel red-green-blue red-yellow-blue. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/color_complement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create color complement by rotating the color hue — color_complement","text":"character vector complementary colors.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/color_complement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create color complement by rotating the color hue — color_complement","text":"function rotates color hue create complementary color color input. differs standard methods using warped color hue default (useWarpHue=TRUE), uses red-yellow-blue color wheel instead R default red-green-blue. also imposes minimum chroma, ensures output color reasonably high color saturation.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/color_complement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create color complement by rotating the color hue — color_complement","text":"","code":"n <- 5; rc <- colorjam::rainbowJam(n); rc_comp <- color_complement(rc, preset=\"dichromat\"); rc_comp2 <- color_complement(rc, preset=\"dichromat\", useWarpHue=FALSE); rc_comp3 <- color_complement(rc, preset=\"ryb\"); jamba::showColors(list(rainbowJam=rc,    `complement\\n(preset=\"dichromat\")`=rc_comp,    `complement\\n(useWarpHue=FALSE)`=rc_comp2,    `complement\\n(preset=\"ryb\")`=rc_comp3));   rc <- colorjam::rainbowJam(n, preset=\"ryb\"); rc_comp <- color_complement(rc, preset=\"ryb\"); jamba::showColors(list(`rainbowJam\\n(preset=\"ryb\")`=rc,    `complement\\n(preset=\"ryb\")`=rc_comp));   ## divergent color gradients through white ## hint: use higher lens value to make middle colors more intense rc <- colorjam::rainbowJam(n); rc_comp <- color_complement(rc); rc_ramps <- lapply(jamba::nameVector(seq_along(rc)), function(i){    j <- jamba::getColorRamp(c(rc[i], \"white\", rc_comp[i]),       n=25,       lens=0,       divergent=TRUE);    names(j) <- \"\";    names(j)[1] <- \"original colors\";    names(j)[25] <- \"color complements\";    j; }); jamba::showColors(rc_ramps, groupCellnotes=TRUE, groupByColors=FALSE);   ## divergent color gradients through black ## hint: use higher lens value to make middle colors more intense rc_ramps2 <- lapply(jamba::nameVector(seq_along(rc)), function(i){    j <- jamba::getColorRamp(c(rc[i], \"black\", rc_comp[i]),       n=25,       lens=1,       divergent=TRUE);    names(j) <- \"\";    names(j)[1] <- \"original colors\";    names(j)[25] <- \"color complements\";    j; }); jamba::showColors(rc_ramps2, groupCellnotes=TRUE, groupByColors=FALSE);   # test divergent color gradient RdBu_r <- jamba::getColorRamp(\"RdBu_r\"); rc_divergent <- color_complement(RdBu_r) jamba::showColors(list(RdBu_r=RdBu_r, complement=rc_divergent));"},{"path":"https://jmw86069.github.io/colorjam/reference/color_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Show colors spread around a pie chart — color_pie","title":"Show colors spread around a pie chart — color_pie","text":"Show colors spread around pie chart","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/color_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show colors spread around a pie chart — color_pie","text":"","code":"color_pie(   colors,   border = colors,   lwd = 2,   radius = 1.1,   label_radius = radius * 0.65,   add = FALSE,   init.angle = NULL,   clockwise = TRUE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/color_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show colors spread around a pie chart — color_pie","text":"colors vector R colors. border vector R colors used draw border around pie wedge. default uses input colors. lwd numeric value used define line width pie wedge borders. radius numeric value representing radius overall pie chart, radius=1 represents default radius used graphics::pie(). default radius=1.5 order use output plot size. label_radius numeric value indicating radius used labels, intended allow labels appear inside pie wedge. add logical indicating whether draw pie chart onto existing plot device, without creating new plot. ... additional arguments passed graphics::pie().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/color_pie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show colors spread around a pie chart — color_pie","text":"function simply displays colors pie chart format. input list, list used produce layers pie chart, order help compare colors vector list.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/color_pie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show colors spread around a pie chart — color_pie","text":"","code":"color_pie(rainbowJam(15, nameStyle=\"none\"),    sub=\"rainbowJam(15)\")   n <- 12; color_pie(list(    rainbowJam(n),    rainbow(n)),    main=\"rainbowJam(12) [outer]\\n       rainbow(12) [inner]\")   n <- 15 color_pie(list(    rainbowJam(n),    rainbow_hcl(n, c=85)),    main=\"rainbowJam(15) [outer]\\nrainbow_hcl(15) [inner]\")   rainbow_list <- lapply(4*c(5,4,2,1), function(n){    rainbowJam(n, preset=\"ryb\", step='v23', nameStyle=\"n\"); }); color_pie(rainbow_list,    main=\"preset='ryb'\\nstep='v23\",    sub=\"rainbowJam()\\nn=4, 8, 16, 20\")   rainbow_list2 <- lapply(4*c(5,4,2,1), function(n){    rainbowJam(n, nameStyle=\"n\"); }); color_pie(rainbow_list2,    main=\"default settings\",    sub=\"rainbowJam()\\nn=4, 8, 16, 20\")   rainbow_list3 <- lapply(4*c(5,4,2,1), function(n){    rainbowJam(n, preset=\"dichromat\", step=\"v23\", nameStyle=\"n\"); }); color_pie(rainbow_list3,    main=\"preset='dichromat'\\nstep='v23'\",    sub=\"rainbowJam()\\nn=4, 8, 16, 20\")"},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorjam R-shiny app server — colorjamShinyServer","title":"Colorjam R-shiny app server — colorjamShinyServer","text":"Colorjam R-shiny app server","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorjam R-shiny app server — colorjamShinyServer","text":"","code":"colorjamShinyServer(input, output, session)"},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colorjam R-shiny app server — colorjamShinyServer","text":"input provided shiny output provided shiny session provided shiny","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyServer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colorjam R-shiny app server — colorjamShinyServer","text":"function contains server logic Colorjam R-shiny app. Colorjam R-shiny app started launchColorjamShiny(), calls shiny::shinyApp(), using arguments server, ui, onStart, options. function fulfills argument ui.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorjam R-shiny app UI — colorjamShinyUI","title":"Colorjam R-shiny app UI — colorjamShinyUI","text":"Colorjam R-shiny app UI","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorjam R-shiny app UI — colorjamShinyUI","text":"","code":"colorjamShinyUI(...)"},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colorjam R-shiny app UI — colorjamShinyUI","text":"... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyUI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colorjam R-shiny app UI — colorjamShinyUI","text":"user interface definition suitable pass shiny::shinyUI().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjamShinyUI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colorjam R-shiny app UI — colorjamShinyUI","text":"function contains UI Colorjam R-shiny app. Colorjam R-shiny app started launchColorjamShiny(), calls shiny::shinyApp(), using arguments server, ui, onStart, options. function fulfills argument ui.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_presets.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorjam hue warp presets — colorjam_presets","title":"Colorjam hue warp presets — colorjam_presets","text":"Colorjam hue warp presets","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_presets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorjam hue warp presets — colorjam_presets","text":"","code":"colorjam_presets(preset = NULL, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_presets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colorjam hue warp presets — colorjam_presets","text":"preset NULL return character vector recognized preset names, character string return specific data associated recognized preset name. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_presets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colorjam hue warp presets — colorjam_presets","text":"character vector recognized colorjam presets, preset provided, returns list elements: h1: HCL color hue indicating actual hue used generating color. h2: HCL color hue indicating virtual hue assigned actual hue h1. direction: 1 indicating forward (increasing, clockwise) progression around color wheel, -1 indicating reverse (decreasing, counter-clockwise) progression around color wheel. default_step: character string name matching value returned colorjam_steps() optional attribute attr(x, \"description\") may contain text description color preset","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_presets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colorjam hue warp presets — colorjam_presets","text":"colorjam_presets(): list names available colorjam presets, preset name provided, returns hue warp data list names \"h1\" \"h2\" suitable use h2hw() hw2h().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorjam chroma/luminance steps — colorjam_steps","title":"Colorjam chroma/luminance steps — colorjam_steps","text":"Colorjam chroma/luminance steps adjust series color hues visibly distinct categorical colors.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorjam chroma/luminance steps — colorjam_steps","text":"","code":"colorjam_steps(step = NULL, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colorjam chroma/luminance steps — colorjam_steps","text":"... additional arguments ignored. steps NULL return character vector recognized steps, character string return specific data associated recognized steps name.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colorjam chroma/luminance steps — colorjam_steps","text":"character vector recognized colorjam step names step NULL, step defined list returned elements C: numeric values indicating HCL Chroma L: numeric values indicating HCL Chroma","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colorjam_steps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colorjam chroma/luminance steps — colorjam_steps","text":"colorjam_steps(): list names available colorjam steps, step name provided, returns list elements \"C\" \"L\".","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert colors to data.frame of color attributes — colors_to_df","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"Convert colors data.frame color attributes","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"","code":"colors_to_df(x, ..., alpha = TRUE, byCols = NULL)"},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"x character vector R colors ... valid criteria subset color data.frame. alpha logical indicating whether retain alpha transparency intermediate operations. alpha=FALSE color transparency ignored, colors returned transparency. byCols character vector colnames sort subset operation.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"data.frame color attributes columns. byCols defined, data.frame sorted using jamba::mixedSortDF(). ... supplied, subset() applied subset colors.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"function takes vector colors returns data.frame relevant color attributes: \"num\" contains integer index input vector x. \"hex\" contains character values hexadecimal colors including alpha. input x \"red\" hex value converted \"#FF0000FF\". \"name\" names(x) empty","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"added-by-jamba-col-hcl-","dir":"Reference","previous_headings":"","what":"Added by jamba::col2hcl()","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"\"H\" contains color hue values 0 360. \"C\" contains color chroma (aka saturation) ranging 0 200, typical \"full saturation\" represented values 100. \"L\" contains color luminance (brightness/lightness) ranging 0 100. \"alpha\" alpha transparency, ranging 0 (fully transparent) 1 (fully opaque, transparent).","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"added-by-grdevices-col-rgb-","dir":"Reference","previous_headings":"","what":"Added by grDevices::col2rgb()","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"\"red\" contains red color channel, values range 0 255. \"green\" contains green color channel, values range 0 255. \"blue\" contains blue color channel, values range 0 255.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"added-by-jamba-col-hsv-","dir":"Reference","previous_headings":"","what":"Added by jamba::col2hsv()","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"\"h\" contains color hue values 0 1. Note values may map directly color hue obtained jamba::col2hcl(). \"s\" contains color saturation values 0 1. \"v\" contains color vibrance (brightness/lightness) values 0 1.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/colors_to_df.html","id":"added-by-jamba-col-hsl-","dir":"Reference","previous_headings":"","what":"Added by jamba::col2hsl()","title":"Convert colors to data.frame of color attributes — colors_to_df","text":"\"hsl_h\" contains color hue values 0 1. Note values may map directly color hue obtained jamba::col2hcl(). \"hsl_s\" contains color saturation values 0 100. \"hsl_l\" contains color luminance (brightness/lightness) values 0 100.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/combine_alphas.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine alpha transparency values with additive logic — combine_alphas","title":"Combine alpha transparency values with additive logic — combine_alphas","text":"Combine alpha transparency values additive logic","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/combine_alphas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine alpha transparency values with additive logic — combine_alphas","text":"","code":"combine_alphas(x, max_alpha = 1, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/combine_alphas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine alpha transparency values with additive logic — combine_alphas","text":"x numeric alpha value, typically limited 0 1. max value can set using max_alpha. max_alpha numeric default 1, maximum permitted alpha value. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/combine_alphas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine alpha transparency values with additive logic — combine_alphas","text":"numeric value combining alpha values.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/combine_alphas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine alpha transparency values with additive logic — combine_alphas","text":"Alpha transparency defined 0 fully transparent, 1 (max_alpha) fully opaque (transparent). purpose permit combining multiple colors, alpha transparency builds time. color contribute proportional fraction overall opacity final color. basic formula: new_alpha <- alpha1 + (1 - alpha1) * alpha2 max_alpha defined: new_alpha <- alpha1 + (max_alpha - alpha1) * alpha2 NA values considered equivalent 0 therefore applied. input alpha values restricted values 0 max_alpha. two values, value applied series, works result applied order.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/combine_alphas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine alpha transparency values with additive logic — combine_alphas","text":"","code":"# it progressively fills 50% of remaining transparency combine_alphas(c(0.5, 0.5)) #> [1] 0.75 combine_alphas(c(0.5, 0.5, 0.5)) #> [1] 0.875 combine_alphas(c(0.5, 0.5, 0.5, 0.5)) #> [1] 0.9375  base_alpha <- 0.5; new_alphas <- sapply(1:5, function(i){    combine_alphas(rep(base_alpha, i)) }) names(new_alphas) <- seq_along(new_alphas); bp <- barplot(new_alphas, ylim=c(0, 1.1), col=\"navy\",    xlab=paste0(\"Number of \",    base_alpha,    \" alpha values combined\")) abline(h=1, lty=2); jamba::shadowText(x=bp[, 1], y=new_alphas,    col=\"white\", cex=1.5,    pos=1,    xpd=TRUE,    label=round(new_alphas, digits=3))"},{"path":"https://jmw86069.github.io/colorjam/reference/display_degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Display degree angles around a unit circle — display_degrees","title":"Display degree angles around a unit circle — display_degrees","text":"Display degree angles around unit circle","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/display_degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display degree angles around a unit circle — display_degrees","text":"","code":"display_degrees(   x,   x2 = x,   add = FALSE,   col = \"darkorange\",   lwd = 2,   top_degree = 0,   clockwise = TRUE,   r1 = 0,   r2 = 1,   r0 = 1,   arrow.length = 0.2,   xlim = NULL,   ylim = NULL,   asp = 1,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/display_degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display degree angles around a unit circle — display_degrees","text":"x numeric angles degrees x2 numeric angles degrees, optionally used show angle changes x x2. add logical indicating whether add existing open plot device. col character vector colors recycled length(x). lwd numeric line width. top_degree numeric angle degrees top (12 o'clock) position graph. clockwise logical indicating whether angles proceed top_degree clockwise (top, top-right, right, bottom-right, bottom, bottom-left, left, top-left, top) counter-clockwise orientation. r1, r2 numeric radius values start end position arrow vector drawn. r0 numeric radius used axis labeled angles. arrow.length numeric passed arrows() define arrow head length. xlim, ylim numeric x-axis y-axis plot limits, respectively. supplied, automatically use 1.1 times higher value c(r1, r2, r0, 1) minimum radius least 1 unless specified otherwise. ... additional arguments ignored.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/display_degrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display degree angles around a unit circle — display_degrees","text":"","code":"display_degrees(c(0, 45, 180, 289),    lwd=4,    col=c(\"red\", \"blue2\", \"purple3\", \"gold\"))   display_degrees(c(90, 270), col=c(\"purple\", \"gold\"), r1=0, r2=0.5) display_degrees(c(0, 45), col=c(\"red\", \"blue\"), r1=0.5, r2=1, add=TRUE)   display_degrees(c(90, 270), col=c(\"purple\", \"gold\"), r1=0, r2=0.5,    arrow.length=0) display_degrees(c(90, 270), x2=c(100, 280), col=c(\"purple\", \"gold\"),    r1=0.5, r2=1, add=TRUE) display_degrees(c(90, 270), x2=c(80, 260), col=c(\"purple\", \"gold\"),    r1=0.5, r2=1, add=TRUE)"},{"path":"https://jmw86069.github.io/colorjam/reference/group2colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign colors to vector of group labels — group2colors","title":"Assign colors to vector of group labels — group2colors","text":"Assign colors vector group labels","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/group2colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign colors to vector of group labels — group2colors","text":"","code":"group2colors(   x,   alpha = 1,   colorFunc = rainbowJam,   colorSub = NULL,   sortFunc = jamba::mixedSort,   useGradient = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/group2colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign colors to vector of group labels — group2colors","text":"x character factor vector representing group membership. alpha numerical value indicating alpha transparency apply output colors, scaled 0 (fully transparent) 1 (transparency). colorFunc function whose first parameter number colors return, ... passed additional parameters needed. default uses colorjam::rainbowJam(). colorSub optional named vector colors, whose names must match entries x. vector used re-apply colors already assigned labels x. sortFunc function use sorting character numeric input x, default jamba::mixedSort(). input x factor, factor levels maintained order. useGradient logical indicating whether apply light--dark gradient repeated colors, example distinguish multiple replicates group. verbose logical indicating whether print verbose output. ... additional parameters passed colorFunc","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/group2colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign colors to vector of group labels — group2colors","text":"function takes character factor vector input, assigns categorical colors label using colorFunc, default rainbowJam(). previous set colors already defined, parameter colorSub intended maintain set colors. However, input values x must present names(colorSub) otherwise colors reassigned. future, function maintain partial set colors, assigning colors maximum visible differences existing colors.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/group2colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign colors to vector of group labels — group2colors","text":"","code":"abcde <- group2colors(letters[1:5]); aabbccddee <- group2colors(rep(letters[1:5], each=2)); aaabbcccccdeeee <- group2colors(rep(letters[1:5], c(3,2,5,1,4))); aaabbcccccdeeee2 <- group2colors(rep(letters[1:5], c(3,2,5,1,4)), useGradient=TRUE);  jamba::showColors(list(abcde=abcde,    aabbccddee=aabbccddee,    aaabbcccccdeeee=aaabbcccccdeeee,    aaabbcccccdeeee2=aaabbcccccdeeee2));"},{"path":"https://jmw86069.github.io/colorjam/reference/h2hw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert standard hue to warped virtual hue — h2hw","title":"Convert standard hue to warped virtual hue — h2hw","text":"Convert standard HCL hue warped (virtual) hue colorjam preset","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/h2hw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert standard hue to warped virtual hue — h2hw","text":"","code":"h2hw(   h,   h1 = NULL,   h2 = NULL,   direction = 1,   preset = getOption(\"colorjam.preset\", \"custom\"),   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/h2hw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert standard hue to warped virtual hue — h2hw","text":"h numeric vector color hues 0 360. hues need sequential order. h1, h2 numeric vector color hues, default defined h2hwOptions(), allowed cases global options overridden modified. direction numeric indicating direction h1 HCL hue relative h2 virtual hue: 1 indicates increasing -1 indicates h1 h2 differ direction preset character string named preset colorjam_presets(), h1,h2,direction values obtained. preset=\"custom\" h1 h2 must provided.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/h2hw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert standard hue to warped virtual hue — h2hw","text":"numeric vector hue values applying hue warp operation.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/h2hw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert standard hue to warped virtual hue — h2hw","text":"function intended convert vector hue values warped hues defined colorjam_presets() given preset. preset defines custom set color hues, example: converting RGB RYB color wheel converting RGB customized dichromat color wheel reversing color wheel Note input hue uses standard HCL color hue defined colorspace::polarLUV(), values ranging 0 360. standard, 12.2 defined red, 120 defined green, 245 defined blue.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/h2hw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert standard hue to warped virtual hue — h2hw","text":"","code":"## Yellow when using an RGB color wheel is 60 degrees, ## but on an RYB color wheel is 120 degrees. h2hw(60, preset=\"ryb\"); #> [1] 120  # RGB colors are convenient, but are not ideal especially when blending # colors. Note that blue and yellow have hues that differ by exactly 180 # degrees, meaning a hue average is as likely to be purple as green. huesBY <- jamba::col2hcl(c(\"blue\", \"yellow\"))[\"H\",]; huesBY; #> [1] 265.87459  85.86596  warpedHuesBY <- h2hw(huesBY, preset=\"ryb\"); warpedHuesBY; #> [1] 263.5224 145.8660"},{"path":"https://jmw86069.github.io/colorjam/reference/h2hwOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hue color warp options — h2hwOptions","title":"Get hue color warp options — h2hwOptions","text":"Get hue color warp options used convert color wheels","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/h2hwOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hue color warp options — h2hwOptions","text":"","code":"h2hwOptions(   h1 = getOption(\"h2hw.h1\"),   h2 = getOption(\"h2hw.h2\"),   preset = getOption(\"colorjam.preset\", \"custom\"),   direction = NULL,   default_preset = \"dichromat2\",   reset = FALSE,   setOptions = c(\"FALSE\", \"TRUE\", \"ifnull\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/h2hwOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hue color warp options — h2hwOptions","text":"h1 numeric vector color hue values represent \"\" hue angles, also referred \"hue warp\" \"hw\" values. One example typical operation: one may want know R hue particular red-yellow-blue hue. scenario h1 \"hue warp\" red-yellow-blue hue, \"hue\" R typical hue used colorspace::polarLUV() grDevices::hcl(), farver::convert_colour(). evenly-spaced red-yellow-blue colors, one define sequence \"hue warp\" values 0 360, convert default hue used R functions. h2 numeric vector color hue values represent \"\" hue angles, also referred \"hue\" \"h\". preset character string indicating whether define h1, h2 values based upon named presets: \"custom\" uses values defined options(\"h2hw.h1\") options(\"h2hw.h2\") exist, otherwise default_preset. character values obtained colorjam_presets(), examples include: \"dichromat\" (default) color wheel intended color-blind friendly omitting much green color region color wheel, reviewing output dichromat::dichromat() \"ryb\" basic red-yellow-blue color wheel \"ryb1\",\"ryb2\",\"ryb3\" experimental red-yellow-blue alternative color wheels designed emphasize various features red-orange-yellow-green range varying degrees. \"rgb\" default R red-green-blue color wheel default_preset character string indicating value preset used default reset=FALSE h1 /h2 defined options(). reset logical whether reset h1 h2 values default values defined h1default h2default. reset=TRUE preset default_preset arguments ignored. setOptions character logical indicating whether update options() \"h2hw.h1\" \"h2hw.h2\". \"ifnull\" options() updated previously NULL. verbose logical whether print verbose output","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/h2hwOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hue color warp options — h2hwOptions","text":"list names h1 h2 containing numeric vectors hues 0 360.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/h2hwOptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get hue color warp options — h2hwOptions","text":"function retrieves /defines, h1 h2 hue vectors used convert h1 \"hue warp\", h2 \"actual hue\". \"actual\" hue used standard R #' functions colorspace::polarLUV(), grDevices::hcl(), farver::convert_colour(). mapping h1 h2 allows customization spacing order colors, allows emulation red-yellow-blue color wheel example. h1 represents color hue terms degree angle ranging 0 360 - full circle - observer. transformed h2 use generating actual R colors. colorjam_presets() lists recognized colorjam presets. add_colorjam_preset() add overwrite colorjam preset name. general, colorjam functions argument preset follow progression: Argument preset=getOption(\"colorjam.preset\", \"custom\") uses preset defined, otherwise \"custom\". option matches recognized preset name, corresponding h1,h2 values used. preset=\"custom\", arguments h1,h2 also poll getOption(\"h2hw.h1\") getOption(\"h2hw.h2\") default values. neither h1,h2 defined, argument default_preset=\"dichromat\" used obtain h1,h2 values. disable warped hue mechanic, set preset=\"rgb\" usess default R color wheel adjustment.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/h2hwOptions.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Get hue color warp options — h2hwOptions","text":"h1,h2 values passed approx_degrees() convert hue degree angles. See adjust_hue_warp() detailed examples manipulating color warp values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/h2hwOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hue color warp options — h2hwOptions","text":"","code":"h2hwOptions() #> $h1 #> [1]  12 340 306 280 240 180 120  65 #>  #> $h2 #> [1] 120.00 185.00 192.00 210.00 330.00 357.99 357.99 357.99 #>  h2hw(60) #> [1] 9.500377  h2hwOptions(h1=c(0, 60,120,240,300,360),    h2=c(0,120,180,240,280,360)) #> $h1 #> [1]  12 340 306 280 240 180 120  65 #>  #> $h2 #> [1] 120.00 185.00 192.00 210.00 330.00 357.99 357.99 357.99 #>  h2hw(300) #> [1] 196.1538"},{"path":"https://jmw86069.github.io/colorjam/reference/hcl_to_hsl_hue.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert HCL hue to HSL hue — hcl_to_hsl_hue","title":"Convert HCL hue to HSL hue — hcl_to_hsl_hue","text":"Convert HCL hue HSL hue","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/hcl_to_hsl_hue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert HCL hue to HSL hue — hcl_to_hsl_hue","text":"","code":"hcl_to_hsl_hue(x, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/hcl_to_hsl_hue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert HCL hue to HSL hue — hcl_to_hsl_hue","text":"x numeric hue values range c(0, 360) intended use jamba::hcl2col() ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/hcl_to_hsl_hue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert HCL hue to HSL hue — hcl_to_hsl_hue","text":"numeric hue values range c(0, 360) intended use jamba::hsl2col()","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/hsl_to_hcl_hue.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert HSL hue to HCL hue — hsl_to_hcl_hue","title":"Convert HSL hue to HCL hue — hsl_to_hcl_hue","text":"Convert HSL hue HCL hue","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/hsl_to_hcl_hue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert HSL hue to HCL hue — hsl_to_hcl_hue","text":"","code":"hsl_to_hcl_hue(x, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/hsl_to_hcl_hue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert HSL hue to HCL hue — hsl_to_hcl_hue","text":"x numeric hue values range c(0, 360) intended use jamba::hsl2col() ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/hsl_to_hcl_hue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert HSL hue to HCL hue — hsl_to_hcl_hue","text":"numeric hue values range c(0, 360) intended use jamba::hcl2col()","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/hw2h.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert warped virtual hue to standard hue — hw2h","title":"Convert warped virtual hue to standard hue — hw2h","text":"Convert warped (virtual) hue standard HCL hue colorjam preset","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/hw2h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert warped virtual hue to standard hue — hw2h","text":"","code":"hw2h(   h,   h1 = NULL,   h2 = NULL,   direction = 1,   preset = getOption(\"colorjam.preset\", \"custom\"),   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/hw2h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert warped virtual hue to standard hue — hw2h","text":"h numeric vector color hues 0 360. hues need sequential order. h1, h2 numeric vector color hues, default defined h2hwOptions(), allowed cases global options overridden modified. direction numeric indicating direction h1 HCL hue relative h2 virtual hue: 1 indicates increasing -1 indicates h1 h2 differ direction preset character string named preset colorjam_presets(), h1,h2,direction values obtained. preset=\"custom\" h1 h2 must provided.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/hw2h.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert warped virtual hue to standard hue — hw2h","text":"numeric vector color hues applying transformation h2 h1 given preset. numeric vector hue values applying hue warp operation.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/hw2h.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert warped virtual hue to standard hue — hw2h","text":"function intended convert vector warped hue values hues defined colorjam_presets() given preset. preset defines custom set color hues, example: converting RGB RYB color wheel converting RGB customized dichromat color wheel reversing color wheel Note output hue uses standard HCL color hue defined colorspace::polarLUV(), values ranging 0 360. standard, 12.2 defined red, 120 defined green, 245 defined blue.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/hw2h.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert warped virtual hue to standard hue — hw2h","text":"","code":"# It can be useful to create a uniform sequence of angles in warped # hues, which are visually more uniform than those using an RGB color wheel, # then convert those hues to standard color hues. warpedHues <- seq(from=0, to=330, length.out=12); warpedHues; #>  [1]   0  30  60  90 120 150 180 210 240 270 300 330  # rgb imposes no change hues <- hw2h(warpedHues, preset=\"rgb\"); hues; #>  [1]   0  30  60  90 120 150 180 210 240 270 300 330  # ryb imposes changes hues <- hw2h(warpedHues, preset=\"ryb\"); hues; #>  [1]  12  24  36  48  60  90 120 180 240 273 306 339"},{"path":"https://jmw86069.github.io/colorjam/reference/jam_divergent.html","id":null,"dir":"Reference","previous_headings":"","what":"Jam Divergent Color Gradients — jam_divergent","title":"Jam Divergent Color Gradients — jam_divergent","text":"Jam Divergent Color Gradients color-blind-friendly.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/jam_divergent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jam Divergent Color Gradients — jam_divergent","text":"","code":"jam_divergent"},{"path":"https://jmw86069.github.io/colorjam/reference/jam_divergent.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Jam Divergent Color Gradients — jam_divergent","text":"object class list length 14.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/jam_divergent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jam Divergent Color Gradients — jam_divergent","text":"data contains list divergent color gradients generated similar jam_linear multi-hue technique based upon RColorBrewer. gradient designed two colors visibly distinct even three different color blindness simulations dichromat::dichromat(). gradient named closest corresponding R colors, names used jam_linear colors can matched appropriate: skyblue_firebrick dodgerblue_orangered royalblue_tomato slateblue_sienna orchid_orange magenta_goldenrod maroon_gold firebrick_skyblue orangered_dodgerblue tomato_royalblue sienna_slateblue orange_orchid goldenrod_magenta gold_maroon linear gradients designed white background color. divergent gradients designed black background, intended help indicate colors divergent. Note linear gradients jam_linear designed white background color.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/jam_divergent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jam Divergent Color Gradients — jam_divergent","text":"","code":"data(jam_divergent) jamba::showColors(jam_divergent)   # show the same with dichromat adjustment if (require(dichromat)) {    jamba::showColors(lapply(jam_divergent, dichromat::dichromat)) } #> Loading required package: dichromat"},{"path":"https://jmw86069.github.io/colorjam/reference/jam_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Jam Linear Color Gradients — jam_linear","title":"Jam Linear Color Gradients — jam_linear","text":"Jam Linear Color Gradients color-blind-friendly.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/jam_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jam Linear Color Gradients — jam_linear","text":"","code":"jam_linear"},{"path":"https://jmw86069.github.io/colorjam/reference/jam_linear.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Jam Linear Color Gradients — jam_linear","text":"object class list length 14.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/jam_linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jam Linear Color Gradients — jam_linear","text":"data contains list linear/sequential color gradients generated multi-hue technique similar used RColorBrewer expand visual clarity linear single-hue color gradient. Colors chosed avoid common color-blindness problems, maximize visual differences color gradients. colors jam_linear designed colors jam_divergent can chosen consistency. example linear color gradient \"firebrick\" can used show coverage values, \"skyblue_firebrick\" can used show coverage difference control, cases maximum color \"firebrick\". linear gradients designed white background color. Note jam_divergent colors designed black background, intended help indicate colors divergent. general, seven warm color tones, seven cool color tones. Visual distinction expected warm cool color tones, distinct within color tone. color named closest corresponding R color: firebrick orangered tomato sienna goldenrod gold skyblue dodgerblue royalblue slateblue orchid magenta maroon","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/jam_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jam Linear Color Gradients — jam_linear","text":"","code":"data(jam_linear) jamba::showColors(jam_linear)   # show the same with dichromat adjustment if (require(dichromat)) {    jamba::showColors(lapply(jam_linear, dichromat::dichromat)) }"},{"path":"https://jmw86069.github.io/colorjam/reference/jam_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Jam color palette for ggplot2 — jam_pal","title":"Jam color palette for ggplot2 — jam_pal","text":"Jam color palette ggplot2","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/jam_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jam color palette for ggplot2 — jam_pal","text":"","code":"jam_pal(   type = \"seq\",   palette = 1,   direction = 1,   invert = FALSE,   darkFactor = 1,   sFactor = 1,   darken = FALSE,   alpha = 1,   useGrey = 20,   preset = getOption(\"colorjam.preset\", \"dichromat2\"),   step = getOption(\"colorjam.step\", \"default\"),   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/jam_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jam color palette for ggplot2 — jam_pal","text":"type character string indicating colors sequential \"seq\". palette integer value indicating categorical palette use, intended provide variety color assignment. (yet implemented.) direction integer indicating whether reverse color assignment, either 1 default forward assignment, -1 reverse assignment. negative value reverse colors. invert logical indicating whether return corresponding contrasting colors, example text labels, typically either \"white\" \"black\" defined jamba::setTextContrastColor(). darkFactor, sFactor numeric passed jamba::makeColorDarker() optional adjustment color, darkness saturation, respectively. Intended using scale_color_jam() scale_fill_jam() want color value lighter darker fill color, useful effect outlines. darken logical indicating whether apply default values darkFactor sFactor darken resulting colors. alpha numeric value indicating alpha transparency, scale 0 (transparent) 1 (non-transparent). useGrey integer value 0 100 indicating grey value, sent jamba::setTextContrastColor(), used invert=TRUE. ... additional arguments passed rainbowJam().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/launchColorjamShiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorjam R-shiny App — launchColorjamShiny","title":"Colorjam R-shiny App — launchColorjamShiny","text":"Colorjam R-shiny App color selection custom adjustments","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/launchColorjamShiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorjam R-shiny App — launchColorjamShiny","text":"","code":"launchColorjamShiny(   ...,   envir = globalenv(),   options = list(width = 1200, host = \"0.0.0.0\", port = 8080),   verbose = TRUE )"},{"path":"https://jmw86069.github.io/colorjam/reference/launchColorjamShiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colorjam R-shiny App — launchColorjamShiny","text":"... additional arguments passed shiny::shinyApp() argument name recognized shiny::shinyApp(). envir environment options list passed shiny::shinyApp(). common options : host either specific IP address requires incoming web requests match IP address, host=\"0.0.0.0\" accept web requests host. port specific numeric web port, port=NULL assign random port number R-shiny app started. width user-configurable width R-shiny app, useful graphical components expect least minimum width. verbose logical indicating whether print verbose output.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/launchColorjamShiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colorjam R-shiny App — launchColorjamShiny","text":"object represents R-shiny app. Printing object passing shiny::runApp() run app.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/launchColorjamShiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colorjam R-shiny App — launchColorjamShiny","text":"","code":"if (interactive()) {    launchColorjamShiny(); }"},{"path":"https://jmw86069.github.io/colorjam/reference/make_jam_divergent.html","id":null,"dir":"Reference","previous_headings":"","what":"Make divergent color gradient — make_jam_divergent","title":"Make divergent color gradient — make_jam_divergent","text":"Make divergent color gradients may also use jam_linear jam_divergent","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/make_jam_divergent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make divergent color gradient — make_jam_divergent","text":"","code":"make_jam_divergent(linear1, linear2 = NULL, lite = TRUE, n = 21, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/make_jam_divergent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make divergent color gradient — make_jam_divergent","text":"linear1 character input consisting one : single character R color single character color gradient name character vector R colors. supplying vector colors, order expected blank maximum color linear2 character input consisting one : single character R color NULL case color(s) defined linear1 passed color_complement() single character color gradient name character vector R colors. supplying vector colors, order expected blank maximum color lite logical indicating whether middle color lite (white), lite=FALSE middle color dark (black). linear1 linear2 provided named color gradient, \"Reds\" \"Blues\", gradient used -, even gradient designed light (dark) neutral color, therefore ignoring lite. n integer number final colors produce. Note n must odd number, order preserve middle color. ... additional arguments passed functions called needed.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/make_jam_divergent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make divergent color gradient — make_jam_divergent","text":"function intended broad capability create divergent color gradients. can take several types input \"side\" divergent gradient, apply light (white) dark (black) middle color defined. types input recognized: character string indicating single R color, passed jamba::getColorRamp() order create one linear color gradient relevant light dark baseline color. character vector indicating specific sequence R colors, also passed jamba::getColorRamp() return single linear color gradient. case, color vector already include baseline light (white) dark (black) color. order colors expected blank color maximum color. character string indicating name recognized color gradient, can RColorBrewer, viridis, one names jam_linear. color jam_linear provided, appropriate gradient used corresponding lite dark baseline color, lite=TRUE uses jam_linear, lite=FALSE uses appropriate half gradient jam_divergent. Note function apply color gradient range numeric values. capability, use col_div_xf() color gradient produced function.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/make_jam_divergent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make divergent color gradient — make_jam_divergent","text":"","code":"jamba::showColors(jam_linear)   jg1 <- make_jam_divergent(\"royalblue\", \"orangered\") jamba::showColors(jg1)  showDichromat(jg1)   jg1b <- make_jam_divergent(\"royalblue\", main=\"Supplied as one color\") jamba::showColors(jg1b)   jg2 <- make_jam_divergent(\"slateblue\", \"firebrick\", n=21) jamba::showColors(jg2)  showDichromat(jg2)   jg3 <- make_jam_divergent(\"slateblue\", \"firebrick\", lite=FALSE, n=21) jamba::showColors(jg3)  showDichromat(jg3)   # Compare manually assembled Blues-Reds to \"RdBu_r\" jg4 <- make_jam_divergent(\"Blues\", \"Reds\", lite=TRUE, n=21) jamba::showColors(c(jg4,    list(RdBu_r=jamba::getColorRamp(\"RdBu_r\", n=21))))   # show \"inferno\" jg5 <- make_jam_divergent(\"inferno\", lite=FALSE, n=21, gradientWtFactor=1) jamba::showColors(jg5)   # Optional ComplexHeatmap if (jamba::check_pkg_installed(\"ComplexHeatmap\")) { xseq <- seq(from=-1, to=1, by=0.1); mseq <- matrix(xseq, ncol=1); m <- mseq %*% t(mseq); rownames(m) <- seq_len(nrow(m)); colnames(m) <- seq_len(ncol(m)); hm1 <- ComplexHeatmap::Heatmap(m[,1:10],    cluster_columns=FALSE,    cluster_rows=FALSE,    row_names_side=\"left\",    border=TRUE,    heatmap_legend_param=list(       border=\"grey10\",       at=seq(from=-1, to=1, by=0.25),       color_bar=\"discrete\"),    col=jg3[[1]])  hm2 <- ComplexHeatmap::Heatmap(m[21:1,12:21],    cluster_columns=FALSE,    cluster_rows=FALSE,    border=TRUE,    heatmap_legend_param=list(       border=TRUE,       at=seq(from=-1, to=1, by=0.25),       color_bar=\"discrete\"),    col=jg2[[1]]) hm1 + hm2 } #> Warning: Row names of heatmap 2 are not consistent with the main heatmap (1). It #> may lead to wrong conclusion of your data. Please double check."},{"path":"https://jmw86069.github.io/colorjam/reference/matrix2heatColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric matrix to heatmap colors — matrix2heatColors","title":"Convert numeric matrix to heatmap colors — matrix2heatColors","text":"Convert numeric matrix heatmap colors","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/matrix2heatColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric matrix to heatmap colors — matrix2heatColors","text":"","code":"matrix2heatColors(   x,   colorV = group2colors(colnames(x)),   defaultBaseColor = \"#FFFFFF\",   transformFunc = c,   lens = 0,   shareLimit = TRUE,   numLimitFactor = 0.95,   numLimit = NULL,   baseline = 0,   color_below_baseline = \"#FFFFFF\",   divergent = FALSE,   rampN = 15,   trimRamp = c(0, 0),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/matrix2heatColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric matrix to heatmap colors — matrix2heatColors","text":"x numeric matrix. colnames(x) created using jamba::makeNames(rep(\"x\", ncol(x))). colorV character vector R colors, named colnames(x), recycled ncol(x) needed. colorV supplied list, list elements mapped colnames(x) order. defaultBaseColor character vector R colors used default base color, colorV supplied vector. transformFunc function applied numeric values color gradient mapped numeric values. example, transformFunc=function()-log10() map colors P-value using -log10(p) transformation. lens numeric value passed jamba::warpRamp() adjust distribution colors along numeric range. shareLimit logical indicating whether one numeric limit numLimit used define numeric range color mapping. numLimitFactor numeric numLimit NULL, factor applied maximum numeric value determine numLimit. numLimit numeric value define maximum numeric value numeric values mapped maximum color. set NULL numLimitFactor used define numLimit. baseline numeric value define numeric baseline, used divergent=FALSE. Values recycled ncol(x) applied column individually. color_below_baseline character color used numeric value baseline. Values recycled ncol(x) applied column individually. color_below_baseline NULL, first color color ramp used values baseline. divergent logical indicating whether apply colors numeric range symmetric around zero. rampN integer value define number color breaks color gradient. trimRamp numeric vector two values, used jamba::getColorRamp() trim intermediate color gradient creating final color ramp length rampN. example, default jamba::getColorRamp() creates color gradient 15 colorr, defined argument gradientN=15, argument trimRamp=c(4,2) trim first 4 colors last 2 colors 15-color gradient, generating final color gradient length rampN. trimRamp argument especially useful remove leading white color, trim first colors ensure first color gradient visibly different background color defined defaultBaseColor. verbose logical indicating whether print verbose output. ... additional arguments passed jamba::getColorRamp() additional customization. arguments handled across columns, column--column basis.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/matrix2heatColors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert numeric matrix to heatmap colors — matrix2heatColors","text":"function intended rapid way applying color gradient columns numeric values, column base color. calls jamba::getColorRamp() column, supplied one color, creates color gradient \"grey95\" output jamba::color2gradient(). lens non-zero, color gradient warped order intensify color saturation across numeric range.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/matrix2heatColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numeric matrix to heatmap colors — matrix2heatColors","text":"","code":"set.seed(123); # generate a random numeric matrix m1 <- matrix(ncol=12, rnorm(120)); m1n <- m1; m1n[] <- format(round(abs(m1), digits=2), trim=TRUE); jamba::imageByColors(    matrix2heatColors(abs(m1),       transformFunc=c,       divergent=FALSE,       lens=-5,       shareNumLimit=TRUE,       baseline=0,       numLimit=4),    cellnote=m1n);"},{"path":"https://jmw86069.github.io/colorjam/reference/mean_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean angle — mean_angle","title":"Calculate the mean angle — mean_angle","text":"Calculate mean angle","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/mean_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean angle — mean_angle","text":"","code":"mean_angle(x, w = NULL, do_plot = FALSE, lens = -5, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/mean_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean angle — mean_angle","text":"x numeric vector angles degrees w numeric vector representing weights do_plot logical indicating whether create visual summary plot lens numeric value passed jamba::warpAroundZero() adjust radius ... additional arguments ignored","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/mean_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean angle — mean_angle","text":"numeric vector contains degree mean angle degrees radius actual radius based upon mean unit vectors radius2 adjusted radius using jamba::warpAroundZero()","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/mean_angle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the mean angle — mean_angle","text":"function takes vector angles degrees (0 360 degrees) returns mean angle based upon average unit vectors. function also optionally accomodates weighted mean values, vector weights supplied w. Part intent function used color blending methods, example taking average color hue vector colors. purpose, colors may varying color saturation transparency, mapped weight w. Colors fully transparent therefore weight w=0 contribute resulting average color hue. Also color blending operations, resulting color saturation adjusted using lens argument, default lens=-5 tendency increase intermediate color saturation.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/mean_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mean angle — mean_angle","text":"","code":"mean_angle(c(120, 45), do_plot=TRUE);  #>        deg     radius    radius2  #> 82.5000000  0.7933533  0.8944940"},{"path":"https://jmw86069.github.io/colorjam/reference/named_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"named_colors from meodai/color-names and R colors() — named_colors","title":"named_colors from meodai/color-names and R colors() — named_colors","text":"named_colors including 4507 entries Git \"meodai/color-names\" v11.0.0, 436 entries R colors().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/named_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"named_colors from meodai/color-names and R colors() — named_colors","text":"","code":"named_colors"},{"path":"https://jmw86069.github.io/colorjam/reference/named_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"named_colors from meodai/color-names and R colors() — named_colors","text":"character vector length 4943, containing hexadecimal colors named human-assigned color names. Note R colors preceded \"R\" name, example \"Rgreen2\", include colors already present \"meodai/color-names\".","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/named_colors.html","id":"processing","dir":"Reference","previous_headings":"","what":"Processing","title":"named_colors from meodai/color-names and R colors() — named_colors","text":"Named colors obtained amazing Github repository meodai/color-names. resource provided 30200 total named colors. subset 4507 color names denoted \"good names\" included . R colors grDevices::colors() whose hex values already included Meodai resource added, removing identical hex colors \"darkred\" \"red4\". R colors named prefix \"R\" labels \"darkred\" became \"Rdarkred\". \"R\" prefix used avoid name clashes, permit Meodai color names take precedence whenever name used resources. Meodai resource seemed visually preferable similarly-named R grDevices::colors() \"brown\", \"chartreuse\", however benefit using R color names since appear match W3C color name standard used HTML CSS.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/named_colors.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"named_colors from meodai/color-names and R colors() — named_colors","text":"https://github.com/meodai/color-names","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/named_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"named_colors from meodai/color-names and R colors() — named_colors","text":"","code":"color_pie(unname(colorjam::named_colors))   # subset for color chroma at least 30 colorjam::color_pie(unname(    colorjam::subset_colors(colorjam::named_colors, C >= 30))) title(main=\"named_colors with C >= 30\")"},{"path":"https://jmw86069.github.io/colorjam/reference/plot_colorjam_preset.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot colorjam preset — plot_colorjam_preset","title":"Plot colorjam preset — plot_colorjam_preset","text":"Plot colorjam preset","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/plot_colorjam_preset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot colorjam preset — plot_colorjam_preset","text":"","code":"plot_colorjam_preset(   preset = NULL,   h1 = NULL,   h2 = NULL,   direction = 1,   xlim = c(0, 360),   ylim = c(0, 360),   digits = 4,   cex = 1,   col = \"#FFFFFF\",   pt_pch = 20,   pt_cex = 1,   pt_col = \"blue\",   pt_step = 5,   colorize_borders = TRUE,   axis_fontfamily = \"Arial\",   axislabel_fontsize = 24,   axis_fontsize = 18,   style = c(\"base\", \"plotly\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/plot_colorjam_preset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot colorjam preset — plot_colorjam_preset","text":"colorize_borders logical indicating whether display color spectrum along x-axis y-axis borders. verbose logical indicating whether print verbose output. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/plot_colorjam_preset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot colorjam preset — plot_colorjam_preset","text":"Plot h1,h2 color hue association, default shown relative h2 (virtual hue) value x-axis, h1 (actual hue) y-axis. duplicated h2 values indicated vertical line.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam.html","id":null,"dir":"Reference","previous_headings":"","what":"rainbow categorical colors using varied luminance and chroma — rainbowJam","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam","text":"rainbow categorical colors using varied luminance chroma","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam","text":"","code":"rainbowJam(   n = NULL,   preset = getOption(\"colorjam.preset\", \"dichromat2\"),   step = getOption(\"colorjam.step\", \"default\"),   Hstart = 0,   alpha = 1,   hues = NULL,   warpHue = NULL,   h1 = NULL,   h2 = NULL,   Cvals = NULL,   Lvals = NULL,   Crange = NULL,   Lrange = NULL,   phase = 1,   direction = c(\"1\", \"-1\"),   do_hue_pad = FALSE,   hue_pad_percent = 0,   nameStyle = c(\"none\", \"n\", \"closest_named_color\", \"closestRcolor\", \"hcl\", \"color\"),   min_requested_n = 3,   doTest = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam","text":"n integer number categorical colors return preset character string matching one entry colorjam_presets(), defines color wheel use. define color wheel, used warpHue=TRUE. step character string matching one entry colorjam_steps(), defines sequence Chroma Luminance values across range color hues. Hstart numeric hue use first hue value color sequence. value represents first color color wheel defined preset, colors arrayed across 360 degrees. alpha numeric alpha transparency colors, values ranging 0 1. multiple values supplied, applied order categorical colors returned. hues numeric optional vector specific hues use instead using Hstart filling 360 degree color wheel colors. warpHue logical (deprecated) formerly enable disable color warping custom color wheel. disable custom color wheel use preset=\"rgb\". h1, h2 numeric (deprecated) favor argument preset define h1 h2 values. use custom values h1 h2 use add_colorjam_preset() define new preset name, use name preset. Cvals, Lvals numeric (deprecated) favor argument step define sequence Chroma Luminance values. define custom values, use add_colorjam_step() define new step name, use name step. Crange, Lrange numeric optional permitted ranges Chroma Luminance values. adjustments may useful impose darker lighter set categorical colors. Chroma value outside given Crange, color Chroma values scaled fit range using jamba::normScale(). process scales lowest observed Chroma minimum Crange, highest observed Chroma maximum Crange, order preserve intermediate gradient values. Luminance value outside given Lrange, color Luminance values scaled fit range using jamba::normScale(). phase integer starting step value use sequence Chroma Luminance values defined colorjam_steps(). Default phase=1 begins first value; phase=2 begins second value. phase negative, Chroma Luminance values reversed, absolute value phase used. example phase=-1 reverses sequence, uses first value. begin last Chroma value, last Luminance value. direction character value indicating direction travel around color wheel, permitting color wheel reversed. using direction=\"-1\" may also helpful use negative phase=-1. \"1\" (default) travels forward, clockwise around color wheel \"-1\" travels reverse, counter-clockwise around color wheel do_hue_pad logical indicating whether apply padding end color hue sequence. padding increases distinction first last colors. hue_pad_percent numeric value 0 100, used do_hue_pad=TRUE apply padding first last color hues. nameStyle character string style name assigned: \"none\" assigns names \"n\" assigns names numerical order \"closest_named_color\" assigns closest matching color named_colors, calling closest_named_color() using ... additional arguments. \"closestRcolor\" assigns names closestRcolors(), using ... additional arguments. \"hcl\" assigns names using H, C, L values \"color\" assigns names hex color min_requested_n numeric experimental value defines minimum internal color hues use n low. Typically argument restricts first several color hues prevent unusual colors. doTest logical indicating whether perform visual test n number colors produced. verbose logical whether print verbose output ... additional arguments passed closest_named_color() nameStyle=\"closest_named_color\" closestRcolor() nameStyle=\"closestRcolor\" jamba::makeNames() nameStyle anything except \"none\".","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam","text":"character vector categorical colors","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam","text":"function customizes similar functions grDevices::rainbow, colorspace::rainbow_hcl(), scales::hue_pal() two main ways: uses warped color wheel (see h2hw() compresses green component standard HCL color hue wheel, extending yellow. uses varying luminance chroma vector selected optimize visual distinctiveness adjacent colors. still limit maximum number effectively different categorical colors, however function appears improve available methods. function also intended enable use custom color wheel, example set color mappings define color-blind friendly ranges colors using warped hue functions h2hw() hw2h(). warpHue=TRUE values h1 h2 used define mapping warped hues standard hues recognized hcl().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam","text":"","code":"rainbowJam(12); #>  [1] \"#EEC12E\" \"#B36B00\" \"#E58713\" \"#D07250\" \"#FF9091\" \"#F5648F\" \"#FFA4E6\" #>  [8] \"#A65FF7\" \"#AF9DFF\" \"#788EE9\" \"#7ACFFF\" \"#00ACFE\" #> attr(,\"preset\") #> [1] \"dichromat2\"  # show colors jamba::showColors(rainbowJam(10));   # show colors color_pie(rainbowJam(10));   # be fancy and label colors using the closest R named color jamba::showColors(rainbowJam(6, nameStyle=\"closestRcolor\"));  # or use the closest R color itself jamba::showColors(names(rainbowJam(6, nameStyle=\"closestRcolor\")));   # be fancy and label colors using the closest named_color jamba::showColors(rainbowJam(6, nameStyle=\"closest_named_color\"));   # be even fancier and use the nearest named color by its name jamba::showColors(named_colors[names(rainbowJam(6, nameStyle=\"closest_named_color\"))]);   # comparison of version 0.0.19.900 and update with version 0.0.20.900 cat19 <- rainbowJam_v1(n=12) cat20 <- rainbowJam(n=12) jamba::showColors(list(version19=cat19, version20=cat20))"},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJamMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Rainbow categorical colors across multiple groups — rainbowJamMulti","title":"Rainbow categorical colors across multiple groups — rainbowJamMulti","text":"Rainbow categorical colors across multiple groups","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJamMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rainbow categorical colors across multiple groups — rainbowJamMulti","text":"","code":"rainbowJamMulti(ns, do_plot = FALSE, ...)"},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJamMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rainbow categorical colors across multiple groups — rainbowJamMulti","text":"ns integer vector n values passed rainbowJam(). do_plot logical indicating whether plot result using jamba::showColors(). ... additional arguments passed rainbowJam().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJamMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rainbow categorical colors across multiple groups — rainbowJamMulti","text":"list categorical colors, length equal input length(ns), color vectors lengths ns.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJamMulti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rainbow categorical colors across multiple groups — rainbowJamMulti","text":"function applies colorjam::rainbowJam() multiple vectors, categorical colors duplicated, assigned well-spaced across rainbow group possible.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJamMulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rainbow categorical colors across multiple groups — rainbowJamMulti","text":"","code":"opar <- par(\"mfrow\"=c(3, 1)); on.exit(par(opar)); ns <- c(A=8, B=3, C=4); colorlist1 <- rainbowJamMulti(ns,    do_plot=TRUE,    main=\"rainbowJamMulti()\");   # basic assignment in order colorset2 <- colorjam::rainbowJam(sum(ns)); colorlist2 <- split(colorset2, rep(seq_along(ns), ns)) jamba::showColors(colorlist2, main=\"sequential assignment\")   # re-assign the same colors colorlist3 <- lapply(ns, colorjam::rainbowJam); jamba::showColors(colorlist3, main=\"independent color assignment\");  par(opar);"},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"rainbow categorical colors using varied luminance and chroma — rainbowJam_v1","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam_v1","text":"rainbow categorical colors using varied luminance chroma","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam_v1","text":"","code":"rainbowJam_v1(   n = NULL,   alpha = 1,   nfloor = 4,   hues = NULL,   Cvals = c(75, 95, 80, 65, 72, 80),   Lvals = c(62, 83, 69, 58, 65, 74),   Crange = NULL,   Lrange = NULL,   Cgrey = NULL,   Hstart = 12.2,   warpHue = TRUE,   doTest = FALSE,   sFactor = 1,   darkFactor = 1,   nameStyle = c(\"none\", \"hcl\", \"colors\"),   h1 = h2hwOptions()$h1,   h2 = h2hwOptions()$h2,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam_v1","text":"n integer number categorical colors return alpha numeric alpha transparency colors, values ranging 0 1. multiple values supplied, applied order categorical colors returned. nfloor minimum number effective color slices taken hue color wheel, primarily used aesthetic choice first two colors reasonably consistent choosing 1, 2, 3, 4, 5 categorical colors. hues optional numeric vector hues use, useful exact hues used instead taking slices along hue color wheel. Note use hue values modification, one also set warpHue=FALSE, otherwise given hues assumed warped hue values. Cvals, Lvals vector chroma (C) luminance (L) values cycled creating colors along vector color hues. values intended maximize visual distinctiveness adjacent nearly-adjacent colors. example, varying bright dark may provide additional distinction two similar color hues. Crange, Lrange vector two numeric values define allowable chroma (C) luminance (L) ranges Cvals Lvals parameter values. supplied, numeric vector Cvals scaled lowest Cvals value maps first value Crange, highest Cvals value maps last value Crange. Varying Crange Lrange values can help produce categorical colors dark light background, changing range values used. Hstart hue use first hue value color sequence. Standard red hue 12.2, default function. doTest boolen indicating whether perform visual test n number colors produced, helps judge visual distinctiveness different combinations dark light colors. sFactor, darkFactor parameters sent jamba::makeColorDarker either equal 1. Setting darkFactor=2 quick way generating categorical border colors, example drawing colored border around categorical colors. Alternatively, setting sFactor=-2, darkFactor=-2 can used desaturate lighten colors used background area rectangle. alpha transparency parameter can also helpful, however graphics devices support transparency, case robust define exact color. nameStyle character value indicating name output colors: \"none\" returns colors names; \"hcl\" assigns names color number prefix, followed H, C, L values; \"colors\" names vector hex color code. h1, h2 numeric vectors used h2hw() hw2h() convert warped hues standard hues. default values define red-yellow-blue (additive) color space, converted red-green-blue color space produce actual R color. verbose logical whether print verbose output","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam_v1","text":"vector colors","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam_v1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam_v1","text":"function customizes similar functions grDevices::rainbow, colorspace::rainbow_hcl(), scales::hue_pal() two main ways: uses warped color wheel (see h2hw() compresses green component standard HCL color hue wheel, extending yellow. uses varying luminance chroma vector selected optimize visual distinctiveness adjacent colors. still limit maximum number effectively different categorical colors, however function appears improve available methods. function also intended enable use custom color wheel, example set color mappings define color-blind friendly ranges colors using warped hue functions h2hw() hw2h(). warpHue=TRUE values h1 h2 used define mapping warped hues standard hues recognized hcl().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/rainbowJam_v1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rainbow categorical colors using varied luminance and chroma — rainbowJam_v1","text":"","code":"rainbowJam_v1(12); #>  [1] \"#BD8F00\" \"#FFBE57\" \"#EB9360\" \"#C97466\" \"#E87F8B\" \"#FF8EBB\" \"#D073D4\" #>  [8] \"#E0BAFF\" \"#9F9FFF\" \"#6D8AD1\" \"#5EA2E7\" \"#00CCED\"  # show colors jamba::showColors(rainbowJam_v1(12));   # be fancy and label colors using the closest R named color jamba::showColors(rainbowJam_v1(12, nameStyle=\"colors\"));"},{"path":"https://jmw86069.github.io/colorjam/reference/remap_colorjam_preset.html","id":null,"dir":"Reference","previous_headings":"","what":"Remap colors to a new colorjam preset — remap_colorjam_preset","title":"Remap colors to a new colorjam preset — remap_colorjam_preset","text":"Remap colors new  colorjam preset, using existing preset available.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/remap_colorjam_preset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remap colors to a new colorjam preset — remap_colorjam_preset","text":"","code":"remap_colorjam_preset(   x,   preset = NULL,   preset_from = NULL,   do_plot = FALSE,   plot_debug = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/remap_colorjam_preset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remap colors to a new colorjam preset — remap_colorjam_preset","text":"character vector hexadecimal colors","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/remap_colorjam_preset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remap colors to a new colorjam preset — remap_colorjam_preset","text":"function experimental, intended convert set categorical colors colorjam preset. existing colors attribute \"preset\" used inform starting preset. output rainbowJam() includes preset attr(x, \"preset\"). HCL HSL color conversions blended together improve imperfect result either method alone. end result imperfect, better alternatives.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/remap_colorjam_preset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remap colors to a new colorjam preset — remap_colorjam_preset","text":"","code":"x <- rainbowJam(12) x_new <- remap_colorjam_preset(x, preset=\"ryb2\", do_plot=TRUE)   x <- rainbowJam(12, preset=\"ryb2\") x_new <- remap_colorjam_preset(x, preset=\"dichromat2\", do_plot=TRUE)   x <- rainbowJam(12, preset=\"ryb\") x_new <- remap_colorjam_preset(x, preset=\"dichromat2\", do_plot=TRUE)   x <- rainbowJam(12, preset=\"dichromat2\") x_new <- remap_colorjam_preset(x, preset=\"ryb\", do_plot=TRUE)   x <- rainbowJam(12, preset=\"rgb\") x_new <- remap_colorjam_preset(x, preset=\"ryb\", do_plot=TRUE)"},{"path":"https://jmw86069.github.io/colorjam/reference/scale_color_jam.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply rainbowJam categorical colors to a ggplot2 object — scale_color_jam","title":"Apply rainbowJam categorical colors to a ggplot2 object — scale_color_jam","text":"Apply rainbowJam categorical colors ggplot2 object","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/scale_color_jam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply rainbowJam categorical colors to a ggplot2 object — scale_color_jam","text":"","code":"scale_color_jam(   ...,   type = \"seq\",   palette = 1,   direction = 1,   invert = FALSE,   darkFactor = 1,   sFactor = 1,   darken = FALSE,   alpha = 1,   useGrey = 20,   preset = getOption(\"colorjam.preset\", \"dichromat2\"),   step = getOption(\"colorjam.step\", \"default\") )"},{"path":"https://jmw86069.github.io/colorjam/reference/scale_color_jam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply rainbowJam categorical colors to a ggplot2 object — scale_color_jam","text":"... additional arguments passed ggplot2::discrete_scale(). type character string indicating colors sequential \"seq\", passed colorjam::jam_pal(). palette integer value indicating categorical palette use, intended provide variety color assignment. (yet implemented.) direction integer indicating whether reverse color assignment, either 1 default forward assignment, -1 reverse assignment. negative value reverse colors. invert logical indicating whether return corresponding contrasting colors, example text labels, typically either \"white\" \"black\" defined jamba::setTextContrastColor(). darkFactor, sFactor numeric passed jamba::makeColorDarker() optional adjustment color, darkness saturation, respectively. Intended using scale_color_jam() scale_fill_jam() want color value lighter darker fill color, useful effect outlines. darken logical indicating whether apply default values darkFactor sFactor darken resulting colors. alpha numeric value indicating alpha transparency, scale 0 (transparent) 1 (non-transparent). useGrey integer value 0 100 indicating grey value, sent jamba::setTextContrastColor(), used invert=TRUE.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/scale_color_jam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply rainbowJam categorical colors to a ggplot2 object — scale_color_jam","text":"function provides function format scale_color_* applied ggplot2 objects. can provide visibly distinct set categorical colors ggplot2::scale_color_hue().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/scale_color_jam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply rainbowJam categorical colors to a ggplot2 object — scale_color_jam","text":"","code":"if (jamba::check_pkg_installed(\"ggplot2\")) {    dsamp <- ggplot2::diamonds[sample(nrow(ggplot2::diamonds), 1000),];    d <- ggplot2::ggplot(       dsamp, ggplot2::aes(carat, price)) +       ggplot2::geom_point(ggplot2::aes(colour=cut),          size=4);     print(d + ggplot2::scale_color_hue() + ggplot2::ggtitle(\"scale_color_hue()\"));    print(d + scale_color_jam() + ggplot2::ggtitle(\"scale_color_jam()\"));    print(d + scale_color_jam(preset=\"ryb\") + ggplot2::ggtitle(\"scale_color_jam(preset='ryb')\")); }"},{"path":"https://jmw86069.github.io/colorjam/reference/scale_fill_jam.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply rainbowJam categorical color fill to a ggplot2 object — scale_fill_jam","title":"Apply rainbowJam categorical color fill to a ggplot2 object — scale_fill_jam","text":"Apply rainbowJam categorical color fill ggplot2 object","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/scale_fill_jam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply rainbowJam categorical color fill to a ggplot2 object — scale_fill_jam","text":"","code":"scale_fill_jam(   ...,   type = \"seq\",   palette = 1,   direction = 1,   invert = FALSE,   darkFactor = 1,   sFactor = 1,   darken = FALSE,   alpha = 1,   useGrey = 20,   preset = getOption(\"colorjam.preset\", \"dichromat2\"),   step = getOption(\"colorjam.step\", \"default\") )"},{"path":"https://jmw86069.github.io/colorjam/reference/scale_fill_jam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply rainbowJam categorical color fill to a ggplot2 object — scale_fill_jam","text":"... additional arguments passed ggplot2::discrete_scale(). type character string indicating colors sequential \"seq\", passed colorjam::jam_pal(). palette integer value indicating categorical palette use, intended provide variety color assignment. (yet implemented.) direction integer indicating whether reverse color assignment, either 1 default forward assignment, -1 reverse assignment. negative value reverse colors. invert logical indicating whether return corresponding contrasting colors, example text labels, typically either \"white\" \"black\" defined jamba::setTextContrastColor(). darkFactor, sFactor numeric passed jamba::makeColorDarker() optional adjustment color, darkness saturation, respectively. Intended using scale_color_jam() scale_fill_jam() want color value lighter darker fill color, useful effect outlines. darken logical indicating whether apply default values darkFactor sFactor darken resulting colors. alpha numeric value indicating alpha transparency, scale 0 (transparent) 1 (non-transparent). useGrey integer value 0 100 indicating grey value, sent jamba::setTextContrastColor(), used invert=TRUE.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/scale_fill_jam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply rainbowJam categorical color fill to a ggplot2 object — scale_fill_jam","text":"function provides function format scale_fill_* applied ggplot2 objects. can provide visibly distinct set categorical colors ggplot2::scale_fill_hue().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/scale_fill_jam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply rainbowJam categorical color fill to a ggplot2 object — scale_fill_jam","text":"","code":"if (jamba::check_pkg_installed(\"ggplot2\")) {    dsamp <- ggplot2::diamonds[sample(nrow(ggplot2::diamonds), 1000),];    d <- ggplot2::ggplot(dsamp,       ggplot2::aes(carat, price)) +       ggplot2::geom_point(          ggplot2::aes(colour=cut, bg=cut),          pch=21,          size=4);     print(d +       scale_color_jam(darkFactor=1.5) +       scale_fill_jam() +       ggplot2::ggtitle(\"scale_color_jam(darkFactor=1.5) + scale_fill_jam()\"));     print(d +       scale_color_jam(darken=TRUE) +       scale_fill_jam() +       ggplot2::ggtitle(\"scale_color_jam(darkFactor=1.5) + scale_fill_jam()\")); }"},{"path":"https://jmw86069.github.io/colorjam/reference/showDichromat.html","id":null,"dir":"Reference","previous_headings":"","what":"Show colors using dichromat color blindness adjustment — showDichromat","title":"Show colors using dichromat color blindness adjustment — showDichromat","text":"Show colors using dichromat color blindness adjustment","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/showDichromat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show colors using dichromat color blindness adjustment — showDichromat","text":"","code":"showDichromat(   x,   type = c(\"deutan\", \"protan\", \"tritan\"),   sep = \"\\n\",   spacer = TRUE,   original = TRUE,   do_plot = TRUE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/showDichromat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show colors using dichromat color blindness adjustment — showDichromat","text":"x list character vector R compatible colors. type character passed dichromat::dichromat() one types color blindness simulate. sep character used delimited label resulting color vector. spacer logical indicating whether include blank spacer sets colors. spacer mainly useful display. original logical indicating whether include original colors adjusted colors. do_plot logical indicating whether plot results using jamba::showColors(). ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/showDichromat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show colors using dichromat color blindness adjustment — showDichromat","text":"function simple wrapper around jamba::showColors() also applies one color blindness emulations dichromat::dichromat().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/showDichromat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show colors using dichromat color blindness adjustment — showDichromat","text":"","code":"showDichromat(jam_linear[\"firebrick\"])   showDichromat(jam_linear[1:2])   showDichromat(jam_linear[7:9])   showDichromat(jam_linear, type=\"tritan\", spacer=FALSE)   showDichromat(jam_linear, type=\"tritan\", spacer=FALSE, original=FALSE)"},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a vector of colors using one or more color attributes — sort_colors","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"Sort vector colors using one color attributes","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"","code":"sort_colors(   x,   ...,   alpha = TRUE,   byCols = c(\"H\", \"C\", \"L\"),   return_type = c(\"colors\", \"df\") )"},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"x character vector R colors ... valid criteria subset color data.frame. alpha logical indicating whether retain alpha transparency intermediate operations. alpha=FALSE color transparency ignored, colors returned transparency. byCols character vector colnames sort subset operation. return_type character string define return object, return_type=\"colors\" returns character vector colors, return_type=\"df\" returns data.frame additional subset colnames included review.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"character vector colors meet filter criteria. return_type=\"df\" returned object data.frame subset columns included review.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"function extension subset_colors() except applies sort order results. input colors x converted internally data.frame colnames added relevant helper functions. \"num\" contains integer index input vector x. \"hex\" contains character values hexadecimal colors including alpha. input x \"red\" hex value converted \"#FF0000FF\".","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"added-by-jamba-col-hcl-","dir":"Reference","previous_headings":"","what":"Added by jamba::col2hcl()","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"\"H\" contains color hue values 0 360. \"C\" contains color chroma (aka saturation) ranging 0 200, typical \"full saturation\" represented values 100. \"L\" contains color luminance (brightness/lightness) ranging 0 100. \"alpha\" alpha transparency, ranging 0 (fully transparent) 1 (fully opaque, transparent).","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"added-by-grdevices-col-rgb-","dir":"Reference","previous_headings":"","what":"Added by grDevices::col2rgb()","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"\"red\" contains red color channel, values range 0 255. \"green\" contains green color channel, values range 0 255. \"blue\" contains blue color channel, values range 0 255.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"added-by-jamba-col-hsv-","dir":"Reference","previous_headings":"","what":"Added by jamba::col2hsv()","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"\"h\" contains color hue values 0 1. Note values may map directly color hue obtained jamba::col2hcl(). \"s\" contains color saturation values 0 1. \"v\" contains color vibrance (brightness/lightness) values 0 1.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/sort_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort a vector of colors using one or more color attributes — sort_colors","text":"","code":"# subset for blue colors jamba::showColors(subset_colors(colors(), H > 200 & H < 265 & C > 80))   # subset for saturated colors jamba::showColors(subset_colors(colors(), C > 120))   # subset for saturated colors then sort by hue jamba::showColors(subset_colors(colors(), C > 120, byCols=c(\"H\", \"-C\", \"-L\")))   # review the data.frame itself subset_colors(colors(), C > 135, return_type=\"df\") #>     num       hex         H        C        L alpha red green blue          h #> 33   33 #FF4040FF  12.17452 150.2994 57.37031     1 255    64   64 0.00000000 #> 34   34 #EE3B3BFF  12.17452 140.5719 53.62872     1 238    59   59 0.00000000 #> 134 134 #FF3030FF  12.17447 161.4385 55.67937     1 255    48   48 0.00000000 #> 135 135 #EE2C2CFF  12.17447 150.9137 52.02483     1 238    44   44 0.00000000 #> 254 254 #00FF00FF 127.71838 135.7769 87.73472     1   0   255    0 0.33333333 #> 255 255 #00FF00FF 127.71838 135.7769 87.73472     1   0   255    0 0.33333333 #> 450 450 #FF00FFFF 307.72706 137.4072 60.32421     1 255     0  255 0.83333333 #> 451 451 #FF00FFFF 307.72706 137.4072 60.32421     1 255     0  255 0.83333333 #> 503 503 #FF4500FF  16.75957 157.7524 57.58173     1 255    69    0 0.04509804 #> 504 504 #FF4500FF  16.75957 157.7524 57.58173     1 255    69    0 0.04509804 #> 505 505 #EE4000FF  16.79571 147.3647 53.86741     1 238    64    0 0.04481793 #> 552 552 #FF0000FF  12.17440 179.0490 53.24079     1 255     0    0 0.00000000 #> 553 553 #FF0000FF  12.17440 179.0490 53.24079     1 255     0    0 0.00000000 #> 554 554 #EE0000FF  12.17440 167.2010 49.71777     1 238     0    0 0.00000000 #> 555 555 #CD0000FF  12.17440 143.7297 42.73850     1 205     0    0 0.00000000 #>             s         v     hsl_h     hsl_s    hsl_l #> 33  0.7490196 1.0000000   0.00000 100.00000 62.54902 #> 34  0.7521008 0.9333333   0.00000  84.03756 58.23529 #> 134 0.8117647 1.0000000   0.00000 100.00000 59.41176 #> 135 0.8151261 0.9333333   0.00000  85.08772 55.29412 #> 254 1.0000000 1.0000000 120.00000 100.00000 50.00000 #> 255 1.0000000 1.0000000 120.00000 100.00000 50.00000 #> 450 1.0000000 1.0000000 300.00000 100.00000 50.00000 #> 451 1.0000000 1.0000000 300.00000 100.00000 50.00000 #> 503 1.0000000 1.0000000  16.23529 100.00000 50.00000 #> 504 1.0000000 1.0000000  16.23529 100.00000 50.00000 #> 505 1.0000000 0.9333333  16.13445 100.00000 46.66667 #> 552 1.0000000 1.0000000   0.00000 100.00000 50.00000 #> 553 1.0000000 1.0000000   0.00000 100.00000 50.00000 #> 554 1.0000000 0.9333333   0.00000 100.00000 46.66667 #> 555 1.0000000 0.8039216   0.00000 100.00000 40.19608  # for curiosity, compare H to h colors_df <- subset_colors(colors(),    C > 20,    byCols=c(\"C\"),    return_type=\"df\"); plot(colors_df$h, colors_df$H,    xlab=\"hsv hue h\",    ylab=\"HCL hue H\",    pch=20,    cex=colors_df$s * 1 + 1,    col=colors_df$hex); title(\"Comparison of HCL hue H\\nwith hsv hue h\")   plot(colors_df$s, colors_df$C,    xlab=\"hsv saturation s\",    ylab=\"HCL chroma C\",    pch=20,    cex=colors_df$s * 1 + 1,    col=colors_df$hex); title(\"Comparison of HCL C\\nwith hsv s\")   plot(colors_df$v, colors_df$L,    xlab=\"hsv vibrance v\",    ylab=\"HCL luminance L\",    pch=20,    cex=colors_df$s * 1 + 1,    col=colors_df$hex); title(\"Comparison of HCL L\\nwith hsv v\")"},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a vector of colors using one or more color attributes — subset_colors","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"Subset vector colors using one color attributes","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"","code":"subset_colors(   x,   ...,   alpha = TRUE,   byCols = NULL,   return_type = c(\"colors\", \"df\") )"},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"x character vector R colors ... valid criteria subset color data.frame. alpha logical indicating whether retain alpha transparency intermediate operations. alpha=FALSE color transparency ignored, colors returned transparency. byCols character vector colnames sort subset operation. return_type character string define return object, return_type=\"colors\" returns character vector colors, return_type=\"df\" returns data.frame additional subset colnames included review.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"character vector colors meet filter criteria. return_type=\"df\" returned object data.frame subset columns included review.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"input colors x converted internally data.frame colnames added relevant helper functions. \"num\" contains integer index input vector x. \"hex\" contains character values hexadecimal colors including alpha. input x \"red\" hex value converted \"#FF0000FF\".","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"added-by-jamba-col-hcl-","dir":"Reference","previous_headings":"","what":"Added by jamba::col2hcl()","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"\"H\" contains color hue values 0 360. \"C\" contains color chroma (aka saturation) ranging 0 200, typical \"full saturation\" represented values 100. \"L\" contains color luminance (brightness/lightness) ranging 0 100. \"alpha\" alpha transparency, ranging 0 (fully transparent) 1 (fully opaque, transparent).","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"added-by-grdevices-col-rgb-","dir":"Reference","previous_headings":"","what":"Added by grDevices::col2rgb()","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"\"red\" contains red color channel, values range 0 255. \"green\" contains green color channel, values range 0 255. \"blue\" contains blue color channel, values range 0 255.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"added-by-jamba-col-hsv-","dir":"Reference","previous_headings":"","what":"Added by jamba::col2hsv()","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"\"h\" contains color hue values 0 1. Note values may map directly color hue obtained jamba::col2hcl(). \"s\" contains color saturation values 0 1. \"v\" contains color vibrance (brightness/lightness) values 0 1.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/subset_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a vector of colors using one or more color attributes — subset_colors","text":"","code":"# subset for blue colors jamba::showColors(subset_colors(colors(), H > 200 & H < 265 & C > 80))   # subset for saturated colors jamba::showColors(subset_colors(colors(), C > 120))   # subset for saturated colors then sort by hue jamba::showColors(subset_colors(colors(), C > 120, byCols=c(\"H\", \"-C\", \"-L\")))   # review the data.frame itself subset_colors(colors(), C > 135, return_type=\"df\") #>     num       hex         H        C        L alpha red green blue          h #> 33   33 #FF4040FF  12.17452 150.2994 57.37031     1 255    64   64 0.00000000 #> 34   34 #EE3B3BFF  12.17452 140.5719 53.62872     1 238    59   59 0.00000000 #> 134 134 #FF3030FF  12.17447 161.4385 55.67937     1 255    48   48 0.00000000 #> 135 135 #EE2C2CFF  12.17447 150.9137 52.02483     1 238    44   44 0.00000000 #> 254 254 #00FF00FF 127.71838 135.7769 87.73472     1   0   255    0 0.33333333 #> 255 255 #00FF00FF 127.71838 135.7769 87.73472     1   0   255    0 0.33333333 #> 450 450 #FF00FFFF 307.72706 137.4072 60.32421     1 255     0  255 0.83333333 #> 451 451 #FF00FFFF 307.72706 137.4072 60.32421     1 255     0  255 0.83333333 #> 503 503 #FF4500FF  16.75957 157.7524 57.58173     1 255    69    0 0.04509804 #> 504 504 #FF4500FF  16.75957 157.7524 57.58173     1 255    69    0 0.04509804 #> 505 505 #EE4000FF  16.79571 147.3647 53.86741     1 238    64    0 0.04481793 #> 552 552 #FF0000FF  12.17440 179.0490 53.24079     1 255     0    0 0.00000000 #> 553 553 #FF0000FF  12.17440 179.0490 53.24079     1 255     0    0 0.00000000 #> 554 554 #EE0000FF  12.17440 167.2010 49.71777     1 238     0    0 0.00000000 #> 555 555 #CD0000FF  12.17440 143.7297 42.73850     1 205     0    0 0.00000000 #>             s         v     hsl_h     hsl_s    hsl_l #> 33  0.7490196 1.0000000   0.00000 100.00000 62.54902 #> 34  0.7521008 0.9333333   0.00000  84.03756 58.23529 #> 134 0.8117647 1.0000000   0.00000 100.00000 59.41176 #> 135 0.8151261 0.9333333   0.00000  85.08772 55.29412 #> 254 1.0000000 1.0000000 120.00000 100.00000 50.00000 #> 255 1.0000000 1.0000000 120.00000 100.00000 50.00000 #> 450 1.0000000 1.0000000 300.00000 100.00000 50.00000 #> 451 1.0000000 1.0000000 300.00000 100.00000 50.00000 #> 503 1.0000000 1.0000000  16.23529 100.00000 50.00000 #> 504 1.0000000 1.0000000  16.23529 100.00000 50.00000 #> 505 1.0000000 0.9333333  16.13445 100.00000 46.66667 #> 552 1.0000000 1.0000000   0.00000 100.00000 50.00000 #> 553 1.0000000 1.0000000   0.00000 100.00000 50.00000 #> 554 1.0000000 0.9333333   0.00000 100.00000 46.66667 #> 555 1.0000000 0.8039216   0.00000 100.00000 40.19608  # for curiosity, compare H to h colors_df <- subset_colors(colors(),    C > 20,    byCols=c(\"C\"),    return_type=\"df\"); plot(colors_df$h, colors_df$H,    xlab=\"hsv hue h\",    ylab=\"HCL hue H\",    pch=20,    cex=colors_df$s * 1 + 1,    col=colors_df$hex); title(\"Comparison of HCL hue H\\nwith hsv hue h\")   plot(colors_df$s, colors_df$C,    xlab=\"hsv saturation s\",    ylab=\"HCL chroma C\",    pch=20,    cex=colors_df$s * 1 + 1,    col=colors_df$hex); title(\"Comparison of HCL C\\nwith hsv s\")   plot(colors_df$v, colors_df$L,    xlab=\"hsv vibrance v\",    ylab=\"HCL luminance L\",    pch=20,    cex=colors_df$s * 1 + 1,    col=colors_df$hex); title(\"Comparison of HCL L\\nwith hsv v\")"},{"path":"https://jmw86069.github.io/colorjam/reference/theme_jam.html","id":null,"dir":"Reference","previous_headings":"","what":"Jam default theme for ggplot2 — theme_jam","title":"Jam default theme for ggplot2 — theme_jam","text":"Jam default theme ggplot2","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/theme_jam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jam default theme for ggplot2 — theme_jam","text":"","code":"theme_jam(   theme_default = ggplot2::theme_bw,   base_size = 18,   grid.major.size = 0.5,   grid.minor.size = 0.25,   strip.background.colour = \"grey30\",   strip.background.fill = \"lightgoldenrod1\",   strip.text.size = ggplot2::rel(0.8),   panel.grid.major.colour = \"grey80\",   panel.grid.minor.colour = \"grey90\",   panel.background = ggplot2::element_rect(fill = \"white\", colour = NA),   panel.border = ggplot2::element_rect(fill = NA, colour = \"grey15\"),   axis.text.x.angle = 60,   blankGrid = FALSE,   blankXgrid = FALSE,   blankYgrid = FALSE,   resetTheme = TRUE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/theme_jam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jam default theme for ggplot2 — theme_jam","text":"theme_default function representing ggplot2 theme. base_size numeric default font point size, used scaling overall text sizes larger smaller. grid.major.size, grid.minor.size numeric line width major minor grid lines, respectively. Set 0 suppress either. strip.background.colour, strip.background.fill character color border strip background ggplot2 using faceted layout. strip.text.size numeric relative class ggplot2::rel() define direct relative text font size, respectively. panel.grid.major.colour, panel.grid.minor.colour character colors major minor grid lines, respectively. panel.background, panel.border element_rect NULL indicating type background border draw around plot panel. set NULL set ggplot2::element_blank() displays nothing. axis.text.x.angle numeric degrees rotate x-axis labels, apparently starts 0 (horizontal) goes counter-clockwise (left.) blankGrid, blankXgrid, blankYgrid logical indicating whether blank grid everything, major, minor axis lines, respectively. Intended make fast easy remove gridlines. resetTheme logical whether call function theme_default essentially resets (replaces) previous settings defined theme function. FALSE specific settings defined function applied. verbose logical indicating whether print verbose output. ... additional arguments passed ggplot2::theme() order allow custom settings beyond function provides.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/theme_jam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jam default theme for ggplot2 — theme_jam","text":"function applies default theme settings ggplot2, mainly taking away default grey newspaper background color, also rotates x-axis label text 60 degrees, accomodate longer labels without overlaps.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/theme_jam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jam default theme for ggplot2 — theme_jam","text":"","code":"if (jamba::check_pkg_installed(\"ggplot2\")) {    dsamp <- ggplot2::diamonds[sample(nrow(ggplot2::diamonds), 1000),];    d <- ggplot2::ggplot(dsamp,       ggplot2::aes(carat, price)) +       ggplot2::geom_point(          ggplot2::aes(colour=cut),          size=2);     print(d + scale_color_jam() + ggplot2::ggtitle(\"scale_color_jam()\"));    print(d + scale_color_jam() + theme_jam() + ggplot2::ggtitle(\"scale_color_jam() + theme_jam()\")); }"},{"path":"https://jmw86069.github.io/colorjam/reference/twostep_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Create two-step linear gradient — twostep_gradient","title":"Create two-step linear gradient — twostep_gradient","text":"Create two-step linear gradient gradually blending two linear color gradients","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/twostep_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create two-step linear gradient — twostep_gradient","text":"","code":"twostep_gradient(   color1 = NULL,   color2 = NULL,   n = 11,   lite = TRUE,   defaultBaseColor = NULL,   adjust = 1.5,   do_fixYellow = TRUE,   debug = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/twostep_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create two-step linear gradient — twostep_gradient","text":"color1 character color name recognized color gradient. color2 character color name recognized color gradient; color2=NULL hue color1 shifted emulate effect similar neighboring color hue. case input color1 used color2 become primary output color. n integer number gradient colors return. n=0 n=NULL output color function. lite logical indicating whether background color white, lite=FALSE background color black. defaultBaseColor character used define specific background color, therefore overrides lite. adjust numeric value used adjust relative weight color1 color2, values higher 1 favor color2 negative values, values less 1 favor color1. do_fixYellow logical indicating whether call jamba::fixYellow() fixes greenish hue sometimes results intended pure yellow. debug logical indicating whether create plot show color blending steps. ... additional arguments passed jamba::getColorRamp().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/twostep_gradient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create two-step linear gradient — twostep_gradient","text":"function intended produce two-step linear gradient effect, similar strategy used RColorBrewer, without specific color constraints. See examples. function takes two color gradients blends using weighting scheme begins 100% color1, gradually becomes 100% color2. input color1 color2 can input recognized jamba::getColorRamp(). example single color can used create gradient, name known color gradient can used, example \"Reds\" refer RColorBrewer palette \"Reds\". See examples. general gradients can blended using function produce new color gradient visual intensity color hue vary along gradient, making color step visibly distinct visual intensity changes. supplying single color input color1 color2 sometimes works best alter brightness one colors intermediate gradients similar intensities. Experimenting debug=TRUE recommended.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/twostep_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create two-step linear gradient — twostep_gradient","text":"","code":"ts <- twostep_gradient(\"yellow\", debug=TRUE)  #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000   ts1 <- twostep_gradient(\"orange2\", \"firebrick\", n=11, debug=TRUE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000  ts2 <- twostep_gradient(\"aquamarine\", \"dodgerblue\", n=11, debug=TRUE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000   # stitch them together with make_jam_divergent() ts1ts2 <- make_jam_divergent(list(ts2=ts2), list(ts1=ts1), n=21) jamba::showColors(ts1ts2)  ts1ts2flat <- make_jam_divergent(\"dodgerblue\", \"firebrick\", n=21) jamba::showColors(list(    twostep=ts1ts2[[1]],    flat=ts1ts2flat[[1]]))   ts3 <- twostep_gradient(\"Greens\", \"Blues\", n=11, debug=TRUE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000   ts4 <- twostep_gradient(\"slateblue2\", \"firebrick\", n=11, debug=TRUE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000   ts5 <- twostep_gradient(\"cividis\", \"inferno\", n=11, debug=TRUE, adjust=-1.2) #>           w1         w2 #> 1  1.0000000 0.00000000 #> 2  1.0000000 0.00000000 #> 3  0.9065106 0.09348938 #> 4  0.8110475 0.18895253 #> 5  0.7132755 0.28672454 #> 6  0.6127353 0.38726468 #> 7  0.5087619 0.49123811 #> 8  0.4003123 0.59968768 #> 9  0.2855330 0.71446705 #> 10 0.1602500 0.83975005 #> 11 0.0000000 1.00000000   gr1 <- twostep_gradient(\"slateblue\", \"purple\", debug=TRUE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000  gr2 <- twostep_gradient(\"gold\", \"darkorange\", debug=TRUE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000  div12 <- make_jam_divergent(list(gr1=gr1), list(gr2=gr2)) jamba::showColors(div12)  div12flat <- make_jam_divergent(\"purple\", \"gold\") jamba::showColors(list(    twostep=div12[[1]],    flat=div12flat[[1]]))   gr1d <- twostep_gradient(\"slateblue1\", \"purple\", debug=TRUE, lite=FALSE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000  gr2d <- twostep_gradient(\"darkorange\", \"gold\", debug=TRUE, lite=FALSE) #>            w1        w2 #> 1  1.00000000 0.0000000 #> 2  1.00000000 0.0000000 #> 3  0.83805248 0.1619475 #> 4  0.68593553 0.3140645 #> 5  0.54433105 0.4556689 #> 6  0.41408666 0.5859133 #> 7  0.29629630 0.7037037 #> 8  0.19245009 0.8075499 #> 9  0.10475656 0.8952434 #> 10 0.03703704 0.9629630 #> 11 0.00000000 1.0000000  div12d <- make_jam_divergent(list(gr1d=gr1d), list(gr2d=gr2d)) jamba::showColors(div12d)  div12dflat <- make_jam_divergent(\"purple\", \"gold\", lite=FALSE) jamba::showColors(list(    twostep=div12d[[1]],    flat=div12dflat[[1]]))"},{"path":"https://jmw86069.github.io/colorjam/reference/validate_colorjam_preset.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate h1,h2 color hue warp data — validate_colorjam_preset","title":"Validate h1,h2 color hue warp data — validate_colorjam_preset","text":"Validate h1,h2 color hue warp data, internal function","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/validate_colorjam_preset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate h1,h2 color hue warp data — validate_colorjam_preset","text":"","code":"validate_colorjam_preset(   h1 = NULL,   h2 = NULL,   direction = NULL,   default_step = NULL,   preset = NULL,   digits = 4,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/validate_colorjam_preset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate h1,h2 color hue warp data — validate_colorjam_preset","text":"h1, h2 numeric color hue degrees direction numeric one two accepted values: 1: (default) indicating forward (increasing, clockwise) progression around color wheel -1: indicating reverse (decreasing, counter-clockwise) progression around color wheel. digits numeric passed round() comparing h2 values duplicated values. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/validate_colorjam_preset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate h1,h2 color hue warp data — validate_colorjam_preset","text":"list components: h1: HCL color hue indicating actual hue used generating color. h2: HCL color hue indicating virtual hue assigned actual hue h1. direction: 1 indicating forward (increasing, clockwise) progression around color wheel, -1 indicating reverse (decreasing, counter-clockwise) progression around color wheel. default_step: character string name matching value returned colorjam_steps()","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/validate_colorjam_preset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate h1,h2 color hue warp data — validate_colorjam_preset","text":"Validate h1,h2 color hue values alongside direction angles proceed. function handles cases h2 contains duplicate values, used remove section h1 output h2 color wheel. Duplicated values handled well approx(), function rounds values 4 digits, sorts data based upon direction, finally adjusts duplicated h2 values adding 1e-8.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/validate_colorjam_preset.html","id":"processing-steps-","dir":"Reference","previous_headings":"","what":"Processing steps:","title":"Validate h1,h2 color hue warp data — validate_colorjam_preset","text":"h1,h2 angles adjusted within range c(0, 360) using x %% 360. h1,h2 values rounded using round(x, digits=digits) h1,h2 values sorted h2 increasing, h1 order direction Duplicated h2 values adjusted adding c(0, 1, 2, ...) + 1e-8 duplicated value, per set duplicated values. first duplicated value set unchanged, subsequent values set increased 1e-8.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/validate_colorjam_preset.html","id":"todo-","dir":"Reference","previous_headings":"","what":"TODO:","title":"Validate h1,h2 color hue warp data — validate_colorjam_preset","text":"Enforce sensible ordering values, mainly R-shiny app h1,h2 edited values permit pushing identical values. example, two identical h2 values cause corresponding h1 values skipped, thus removing range hues. one h2 value increased, also increase subsequent values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/vals2colorLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply color gradient to numeric values — vals2colorLevels","title":"Apply color gradient to numeric values — vals2colorLevels","text":"Apply color gradient numeric values","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/vals2colorLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply color gradient to numeric values — vals2colorLevels","text":"","code":"vals2colorLevels(   x,   divergent = TRUE,   col = \"RdBu_r\",   defaultBaseColor = \"#FFFFFF\",   lens = 0,   numLimit = NULL,   baseline = NULL,   rampN = 25,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/colorjam/reference/vals2colorLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply color gradient to numeric values — vals2colorLevels","text":"x numeric vector divergent logical indicating whether numeric values divergent, default baseline=0 center color ramp zero. col color value compatible col argument jamba::getColorRamp(). Example include: single color; multiple colors; single color ramp name; custom color function. defaultBaseColor character color used base color single color supplied col. lens numeric value sent jamba::warpRamp(), define level color warping apply color gradient, lens=0 applies adjustment. numLimit numeric value indicating maximum numeric value, values x greater value assigned maximum color. defined, divergent=TRUE uses max(abs(x), na.rm=TRUE), divergent=FALSE uses max(x, na.rm=TRUE). baseline numeric value indicating minimum numeric value, values x less value assigned minimum color. defined, divergent=TRUE sets baseline=0; divergent=FALSE uses min(x, na.rm=TRUE). rampN integer number colors define color gradient. Higher values define smooth color gradient. verbose logical indicating whether print verbose output. ... additional arguments passed jamba::getColorRamp().","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/vals2colorLevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply color gradient to numeric values — vals2colorLevels","text":"function similar several existing R functions take vector numeric values, apply color gradient (color ramp) numeric values. function provides ability warp color ramp, example using jamba::warpRamp() order adjust color gradient relative numeric range data. Note function col_div_xf() col_linear_xf() may preferable function. functions assign colors specific numeric values, instead assigning colors numeric break points.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/reference/vals2colorLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply color gradient to numeric values — vals2colorLevels","text":"","code":"# Start with an example numeric vector x <- jamba::nameVector(-5:10); jamba::showColors(vals2colorLevels(x));   # decrease the number of gradient colors jamba::showColors(vals2colorLevels(x, rampN=15))   # change the baseline jamba::showColors(vals2colorLevels(x, baseline=-2));   # adjust the gradient using lens par(\"mar\"=c(5,5,4,2)); jamba::imageByColors(jamba::rbindList(lapply(jamba::nameVector(c(-5,-2,0,2,5)), function(lens){    vals2colorLevels(x, rampN=25, lens=lens); }))); title(ylab=\"color lens factor\", xlab=\"numeric value\",    main=\"Effects of warping the color gradient\");"},{"path":"https://jmw86069.github.io/colorjam/reference/vibrant_color_by_hue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vibrant reference color for a given HCL color hue — vibrant_color_by_hue","title":"Get vibrant reference color for a given HCL color hue — vibrant_color_by_hue","text":"Get vibrant reference color given HCL color hue","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/vibrant_color_by_hue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vibrant reference color for a given HCL color hue — vibrant_color_by_hue","text":"","code":"vibrant_color_by_hue(h, C = 60, S = 100, L = 50)"},{"path":"https://jmw86069.github.io/colorjam/reference/vibrant_color_by_hue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vibrant reference color for a given HCL color hue — vibrant_color_by_hue","text":"h numeric color hue range c(0, 360). C, S, L numeric values used color conversion: C intermediate HCL color chroma S HSL color saturation L HSL lightness ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/vibrant_color_by_hue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vibrant reference color for a given HCL color hue — vibrant_color_by_hue","text":"character vector colors hue h.","code":""},{"path":"https://jmw86069.github.io/colorjam/reference/vibrant_color_by_hue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get vibrant reference color for a given HCL color hue — vibrant_color_by_hue","text":"function converts h HCL hue hex color using jamba::hcl2col(). hex color converted HSL color space using jamba::col2hsl(), color saturation lightness can adjusted full saturation without going outside HCL color gamut. HSL color converted back hex color format. reason two-step conversion honor HCL color hue, numeric value used HSL color space.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"colorjam-0030900","dir":"Changelog","previous_headings":"","what":"colorjam 0.0.30.900","title":"colorjam 0.0.30.900","text":"Moved jamba Imports, Depends, cleaner R code. Updated named_colors v11.0.0 \"meodai/color-names\"","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"updates-to-existing-functions-0-0-30-900","dir":"Changelog","previous_headings":"","what":"updates to existing functions","title":"colorjam 0.0.30.900","text":"blend_colors() Improved support applying alpha output color. New argument apply_alpha=TRUE apply alpha transparency multiple colors, returning blended color appropriate transparency. goal blend transparent red produce less transparent red. New argument flatten_alpha optionally flatten blended color transparency using background color bg. goal convert transparent red (see ) light red equivalent transparent red white background. New argument bg used flatten_alpha=TRUE, background color white. closest_named_colors() now uses proper colorjam::named_colors fix error calling colorjam::closest_named_colors() without loading colorjam package first.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-0-0-29-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"colorjam 0.0.29.900","text":"blend_colors(): Fixed error matrixStats installed.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"other-changes-0-0-29-900","dir":"Changelog","previous_headings":"","what":"other changes","title":"colorjam 0.0.29.900","text":"Added testthat coverage core functions.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-0-0-28-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"colorjam 0.0.28.900","text":"blend_colors() properly using preset whenever options(\"jam.preset\") already defined, take priority color blending. Fixed passing preset=\"custom\" internally. Also expanded available preset values permit values colorjam_presets().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-0-0-27-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"colorjam 0.0.27.900","text":"launchColorjamShiny() Error jamba already loaded, added proper package prefix: jamba::kable_coloring() subset_colors() added missing prefixes jamba::rgb2col() rainbowJam() added missing prefix jamba::col2hcl() named_colors - fixed missing named using data-raw/named_colors.R","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"other-changes-0-0-27-900","dir":"Changelog","previous_headings":"","what":"other changes","title":"colorjam 0.0.27.900","text":"Added @source named_colors Github “meodai/color-names” Added data-raw/ prepare named_colors Small adjustments preset=\"dichromat2\" rainbowJam() new argument min_requested_n previously used internally, exposed testing minimum requested hues. Secretly used ensure first 5 colors pretty. new default second color now blue! maybe done . right now like .","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"colorjam-0026900","dir":"Changelog","previous_headings":"","what":"colorjam 0.0.26.900","title":"colorjam 0.0.26.900","text":".onLoad() add default options(colorjam.preset=\"dichromat2\"), can customized. README.Rmd rewritten match recent updates.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-26-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.26.900","text":"sort_colors() argument byCols=NULL changed byCols=c(\"H\", \"C\", \"L\") default behavior sort colors hue, previously default behavior sort colors, seemed counter default purpose function. new preset \"hcl_to_hsl\" intended internal use convert HCL hue HSL hue. launchColorjamShiny() now hides presets: \"none\", \"hcl_to_hsl\"","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-26-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.26.900","text":"remap_colorjam_preset() experimental, intended remap colors one preset another works fairly well, honestly may marginal utility hcl_to_hsl_hue(),hsl_to_hcl_hue() conversion hue HCL HSL color spaces.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"colorjam-0025900","dir":"Changelog","previous_headings":"","what":"colorjam 0.0.25.900","title":"colorjam 0.0.25.900","text":"Added MIT license copyright.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"general-updates-0-0-25-900","dir":"Changelog","previous_headings":"","what":"general updates","title":"colorjam 0.0.25.900","text":"dichromat added package dependency. Respect. cli added package dependency (v24 actually), consistent recommended R package messaging. preset now includes direction default_step, optional attribute \"description\" label. testing soon became clear preset designed step mind, appropriate default_step stored also direction previously deduced h1,h2 values, however unnecessary encoded preset avoid errors. benefit, made simple R-shiny app: visualize colors rainbowJam() adjust number colors n, preset, step plotly adjust preset control points, creating new color wheel subset specific colors direct visual comparison used R-shiny app create optimize dichromat2: starts gold roughly evenly distributes warm/cool colors around two halves color wheel roughly evenly distributes color-blindness sensitive colors around two halves color wheel, “deutan”, “protan”, “tritan”. isn’t perfect, enhance visual distinction adjacent colors, fairly scalable large n.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-data-0-0-25-900","dir":"Changelog","previous_headings":"","what":"new data","title":"colorjam 0.0.25.900","text":"named_colors Superset 4883 hexadecimal colors corresponding color names: 4447 colors Github \"meodai/color-names\" repository; 436 colors grDevices::colors(), already defined Meodai colors. Colors intended improve labeling rainbowJam() colors. Color labels closest_named_color() become QC step confirm rainbowJam() creates colors can assigned different named colors. testing, grDevices::colors() provide sufficient detail, specific examples frequently included \"cornflowerblue\" \"steelblue\" despite appearing colors visibly distinctive blue/purple color hues.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-25-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.25.900","text":"launchColorjamShiny() simple R-shiny app display categorical colors selection ', preset, step, phase, subset plotly interactive plot h1 h2 values, can edited! perfect, need override plotly “snap” behavior, seems hard-coded. optional dichromat::dichromat() adjustment simulate color-blindness colorjamShinyServer(),colorjamShinyUI() internal functions provide server ui components shiny::runApp(). closest_named_color() simple wrapper closestRcolor() except uses 4883 named_colors instead R grDevices::colors(), although colors contained named_colors. validate_colorjam_preset() function adjust raw h1,h2 values, wrap within range c(0, 360) breaks ties way maintains proper sort order direction=1 direction=-1 Todo: impose edits h1,h2 order. E.g. one point adjusted past next point, next point shifted. plot_colorjam_preset() visual plotting h1,h2 values, showing resulting color along respective axis. option base R plot, plotly editable control points (editing functional inside R-shiny app). vibrant_color_by_hue() external convenience function takes HCL color hue returns saturated HSL color. internally converts HCL hex, hex HSL - HSL hue differs HCL hue. using HSL hue uses S=100, L=50 obtain saturated color. still shows color hue “drift” since HCL hue HSL hue linear relationship different CL SL values, ’s much better using HCL letting randomly determine hue closest match requested HCL values.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-25-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.25.900","text":"rainbowJam() new argument option nameStyle=\"closest_named_color\" uses 4883 named_colors labeling. nameStyle=\"hcl\" now calculates actual HCL values input values hcl(), values may change upon creating color gamut. h1,h2 deprecated, instead use preset Cvals,Lvals deprecated, instead use step phase can take one values, select order specific items given step colorjam_presets(),add_colorjam_preset() preset now also direction default_step. h2hw(),hw2h() now calls colorjam_presets() approx_degrees() now accepts preset input handles (requires) direction instead determining h1,h2 calls validate_colorjam_preset() handle tie-breaks closestRcolor() names assigned colorSet names, helpful reference colors hex, names user-friendly labels.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"colorjam-0024900","dir":"Changelog","previous_headings":"","what":"colorjam 0.0.24.900","title":"colorjam 0.0.24.900","text":"version colorjam turned bit refactor: Color wheels now stored “presets”: presets stored within colorjam environment preset names given colorjam_presets() preset values accessed colorjam_presets(\"dichromat\") new presets registered add_colorjam_preset() preset can defined options(\"colorjam.preset\") Rainbow colors adjusted Chroma/Luminance “steps”: “steps” stored colorjam environment step list numeric vectors named \"C\" \"L\", values within range: c(0, 100). steps accessed colorjam_steps(), colorjam_steps(\"v24\") new steps registered add_colorjam_step() steps can defined options(\"colorjam.step\") Background: rainbowJam() used arguments Cvals Lvals apply sequence luminance/chroma values series color hues. variation C L values intended maximize visual distinctiveness consecutive colors. fact, process inspiration colorjam, make rainbow catgorical colors visually distinctive comparable functions notably intend produce colors similar possible. Different motivations. colorspace::rainbow_hcl(n, c, l) accepts one value per c l argument grDevices::rainbow() uses non-uniform hsv color space, accepts multiple values arguments s v. (fair, hcl.colors() Altogether rainbowJam() defines categorical colors two core elements: \"preset\": color wheel starting color, define color hues. \"steps\": series Chroma/Luminance values apply color hues. Starting color: RGB color wheel classically “starts ” red. first color visible spectra (“ROY G. BIV”: red, orange, yellow, green, blue, indigo, violet) red. However, color “wheel” colors rolled back , color can placed top. Red traditional. heavy usage package, became clear assigning categorical colors statistical designs ideal. Specifically, standardized experiment designs “control” experiment factor first value column. examples: c(\"Control\", \"Dexamethasone\", \"Etoposide\"); c(\"Wildtype\", \"ADAM19_Knockout\"); c(\"Time0\", \"Time1\", \"Time2\", \"Time3\") first group always colored bright red; subsequent groups assigned orange, yellow, blue, purple. Dr. Ayland Letsinger asked didn’t start yellow instead red, control group neutral color? Brilliant. new presets include: \"dichromat2\" starts gold, proceeds reverse red, purple, blue. (green dichromat color wheel.) \"ybr\" derived \"ryb\" except starts yellow, proceeds “forward” green, blue, purple, red. Added cli package dependency improved messaging, particularly deprecated function arguments.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-0-0-24-900","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"colorjam 0.0.24.900","text":"Added missing package prefix internal references jam_linear jam_divergent data objects.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-24-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.24.900","text":"rainbowJam() argument preset primary definition color wheel arguments Cvals,Lvals,Crange,Lrange deprecated (frankly, affected though, ) arguments h1,h2 deprecated ignored favor preset. use custom h1,h2 must added new preset referred name. new argument step defines sequence C L values steps specific previous versions colorjam available: \"v19\", \"v20\", \"v23\", \"v24\". steps adjusted minimize bounds colors, colorspace farver handle adjusting color channels; sometimes substantially changing output color hue. change sometimes caused color hue sequence reverse accommodate requested C L values, driving use case refactored arguments preset steps. color_pie() text labels rotated parallel pie wedge text labels use jamba::shadowText() jamba::setTextContrastColor() default radius now 1.1, fit plot devices. closestRcolor() New argument Cgrey recognize input x colors greyscale, case matched colors colorSet C_min Chroma saturation. default, color matching much improved using mix saturated unsaturated colors. scale_color_jam(),scale_fill_jam(),jam_pal() ggplot2-related functions dropped arguments h1,h2 (used), added argument step. default preset=\"dichromat2 consistent rainbowJam(). h2hw(),hw2h(),h2hwOptions() new argument default preset=getOption(\"colorjam.preset\", \"custom\") behaves previous preset=\"custom\" except now honors option \"colorjam.preset\" defined. two exceptions preset blend_colors() closestRcolor() default \"ryb\" specific use cases favor using red-yellow-blue color wheel. approx_degrees() refactored improve handling discontinuous angles, example mapped color wheel wraps 360 degrees, 0 degrees. make_jam_divergent() New behavior: linear2 supplied, calls color_complement() determine reasonable opposing color, one can call make_jam_divergent(\"red\") provide reasonable","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-24-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.24.900","text":"adjust_hue_warp() helper function rotate reverse color wheel way color hue warp. Maybe eventually colors can start gold/yellow continue either red blue, first assigned color “neutral” (yellow) since first group statistical comparison typically control. People suggested default color control group brightest red. colorjam_preset(),add_colorjam_preset() manages recognized colorjam color hue presets, allows custom preset names without modifying package code. intended register (delete) colorjam named presets, custom color wheels. colorjam_step(),add_colorjam_step() “step” sequence Luminance/Chroma values intended maximize visual distinctiveness consecutive colors. purpose storing steps colorjam environment allow convenient way select step sequence rather defining individual C L values function call. Specifically, steps driven change start colors near yellow, rather starting red. color sequences starting red, early colors generally darker; sequences starting yellow gold, early colors generally lighter. h2hwOptions() now calls colorjam_presets() instead using internal values.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"colorjam-0023900","dir":"Changelog","previous_headings":"","what":"colorjam 0.0.23.900","title":"colorjam 0.0.23.900","text":"bumped dependency jamba (>= 0.0.83.900) include hsl2col(), col2hsl()","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-23-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.23.900","text":"subset_colors() now calls colors_to_df() create data.frame, whose columns can used sort colors. theme_jam() changes: new argument strip.text.size default ggplot2::rel(0.8) help adjust facet panel strip text font size directly. new argument panel.border make adjustments convenient, default panels now thin dark gray outline. Set panel.border=NULL hide border. scale_color_jam(), scale_fill_jam(), jam_pal(): new argument darken logical, darken=TRUE automatically sets darkFactor sFactor reasonable values subtle darkening. option convenient slightly darker outlines around points.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-23-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.23.900","text":"colors_to_df() convert vector colors data.frame column values representing several common colorspace formats. Note HSL color dimensions prefix \"hsl_\", example \"hsl_h\", \"hsl_s\", \"hsl_l\". reason, H hue values HCL match hue values HSL, despite angles range c(0, 360). Fun. non-linear conversion hue makes sense, appears HSV, HSL, RGB share “color wheel”, derived red-green-blue maxima used computer monitors. HCL added offset +12.2 degrees every color, probably color sorting always variations red appearing first, near zero, avoiding colors -0.1 sorting last hue 359.9. Surprising hue sort order shared HCL HSL, although probably caused conversion low-chroma/saturation colors, underlying numeric rounding errors. HCL based upon perception, giving slightly stronger weight perceptiveness certain color components. sort_colors() applied sort criteria data returned colors_to_df().","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"hsl-color-update-preparation-0-0-23-900","dir":"Changelog","previous_headings":"","what":"HSL color update (preparation)","title":"colorjam 0.0.23.900","text":"anticipate rainbowJam() function shift using HCL, instead using HSL color selection. Summary thought process far: HCL colors “gamut” capped color channel, causing hue returned differ hue requested HCL color space. HCL benefit general, C L values can used determine perceptive color difference colors, allowing one set minimum perceived color difference threshold. However, every color hue different color gamut allowable C L values, making difficult apply consistent rules color hue. HSL benefit “full saturation colors” hue coordinate (S=100, L=50), however guarantee surrounding colors consistent perceptual difference. rainbowJam() uses “tricked ” C L sequences, request higher C chroma possible hues, causing return higher saturation typical. Meanwhile L values help create 6 distinct colors every hue. downside hue often different requested, causing problems n high, sometimes series colors nearly identical hue due conversion issues described . Also, practically speaking, colors like \"yellow\" effectively lost, since brighter higher chroma color hues C,L sequence permit using yellow color hues C L values. Large swaths beautiful colors never chosen categorical color sets, just . Cue “de Blob” video game cut scene. hope use HSL, S,L value sequence fill gap. Surprisingly, HSL hues different spacing HCL hues, means even red-yellow-blue color wheel require new color warp adjustments.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-0-0-22-950","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"colorjam 0.0.22.950","text":"approx_degrees() calling tcount() jamba package, jamba package listed “Depends” functions loaded available colorjam loaded. However, curious reason R internals, function called directly colorjam::approx_degrees() import jamba functions, therefore jamba::tcount() available, throws error. issue reported via venndir package, default usage venndir causes error basic operations. workaround load colorjam jamba first, however real fix include package prefix .","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-22-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.22.900","text":"new hue warp preset available, fully corrected “red-yellow-blue” gradient intended provide full color complement capability. However, rainbowJam() preparing larger update focuses choosing colors within gamut color hue. colorspace farver color conversion functions able provide colors outside gamut altering components ultimately change hue. result, hue sequence rainbowJam() sometimes order due correction. new method returns strictly correct hue within gamut tested applied upcoming release. New default preset=\"custom\" used several functions, re-use defined h1 h2 values options(\"h2hw.h1\") options(\"h2hw.h2\"), otherwise use default_preset=\"dichromat\". default scenario, nothing change. custom h1 h2 used, easier applied default. Setting preset named value override stored h1 h2 values. rainbowJam() argument value changed hue_pad_percent=0, subtle change means less color buffer first last color hue sequence. argument useful partial workaround color hue gamut conversion “bug” colorspace farver. technically bug, documented behavior, output one expect imo. approx_degrees() modified simplify logic, handle special cases like inverted angles, rotated angles. h2hwOptions(), h2hw(), hw2h(), rainbowJam() default argument changed preset=\"custom\" preserve pre-existing h1,h2 values, otherwise named preset take priority define h1,h2 values directly. scale_color_jam(), scale_fill_jam(), jam_pal() updated use preset=\"custom\" default, pass h1 h2 arguments. New option: options(\"colorjam.preset\") convenient way maintain current preset.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-21-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.21.900","text":"closestRcolor() twostep_gradient() updated use proper package prefixing jamba package. scale_color_jam() scale_fill_jam() longer require(ggplot2), use jamba::check_pkg_installed() test whether ggplot2 available. Added examples . theme_jam() longer require(ggplot2) now properly calls ggplot2::theme_classic() argument resetTheme=TRUE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-20-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.20.900","text":"rainbowJam() arguments Lvals Cvals updated, making categorical palette brighter overall, color saturation, visible distinction neighboring colors higher n values. examples rainbowJam() updated show comparison.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-experimental-function-0-0-20-900","dir":"Changelog","previous_headings":"","what":"new experimental function","title":"colorjam 0.0.20.900","text":"rainbowJamMulti() intended extend rainbowJam() specifically list categorical colors created , way prevents duplicate colors.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"colorjam-0019900","dir":"Changelog","previous_headings":"","what":"colorjam 0.0.19.900","title":"colorjam 0.0.19.900","text":"Several new functions, two new data objects color gradients; pkgdown site documentation updated showcase several new visual examples new color functions.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-19-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.19.900","text":"scale_color_jam(), scale_fill_jam() jam_pal() new argument preset passed along rainbowJam() define color hue wheel preset. default preset=\"dichromat\" uses color blind friendly color hue wheel (mainly omitting green). full rainbow can used preset=\"ryb\" uses enhanced red-yellow-blue color hue wheel, green secondary color yellow blue. default R red-green-blue color hue wheel can used preset=\"rgb\" although palette optimal computer monitor use RGB, optimal human perception, even among can see full rainbow color hues.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-19-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.19.900","text":"subset_colors() subset function vector R colors, allows rapid operations RGB, HCL, HSV attribute. col_div_xf() produces color function maps numeric values divergent color gradient. arguments define numeric range, optional floor. floor range absolute numeric value assigned middle color, useful represent visual whether point meets numeric threshold. function motivated used argument \"col\" ComplexHeatmap::Heatmap(), define numeric range zero fixed mid-point associated divergent colors. name function derived follows: col matching argument ComplexHeatmap::Heatmap() \"col\" div divergent colors x x-defined numeric range f ability apply numeric floor col_linear_xf() linear/sequential color equivalent col_div_xf(). useful two features: define fixed numeric ceiling color assignment define optional numeric floor, numeric values assigned first color, usually blank color color gradient. make_jam_divergent() creates divergent color gradient lite (white) dark (black) middle color appropriate. can recognize one new Jam gradients jam_linear `jam_divergent (see ). twostep_gradient() simple fairly exciting new function produces linear/sequential color gradient - means proceeds baseline color saturated color - also applying two intermediate color gradients improve visual perception. gradients RColorBrewer employ technique expand range colors, improve visibility color step varying brightness, color hue. See examples visual illustrations.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-color-objects-0-0-19-900","dir":"Changelog","previous_headings":"","what":"new color objects","title":"colorjam 0.0.19.900","text":"Two new color gradient objects added, still development used gain feedback. motivated use case providing color gradients genome sequence coverage heatmaps, provided \"platjam\" package extends Bioconductor EnrichedHeatmap, extension author ComplexHeatmap. colors aim provide color-blind-friendly color gradients, providing utility categorical coloring different panels coverage heatmap. Essentially colors avoid range green hues, vastly improves visual distinctiveness three color blindness forms emulated dichromat::dichromat(). jam_linear new R list object contains set linear color gradients white background color. intended paired jam_divergent. names jam_linear also used jam_divergent. jam_divergent new R list object contains set divergent color gradients black background color distinguish jam_linear. names jam_divergent also used jam_linear.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes--enhancements-0-0-18-900","dir":"Changelog","previous_headings":"","what":"bug fixes / enhancements","title":"colorjam 0.0.18.900","text":"blend_colors() updated handle blending entirely grey sets colors. Previously failed blend lack color saturation also zero weight. blend_colors() new argument c_floor defines C chroma color saturation floor, color considered color hue. Technically given hue weight 0.0001.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-0-0-17-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"colorjam 0.0.17.900","text":"mean_angle() bare reference jamba::deg2rad() fixed. fixed error blend_colors() jamba attached.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-16-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.16.900","text":"blend_colors() performs paint color mixing, close subtractive color blending modifications account red-yellow-blue color wheel. can mix two colors, accounts color transparency. function currently performs better color mixing function aware R – judged tendency return “expected” cases . mean_angle() takes vector angles degrees, optionally weights, returns average angle along new radius. Internally takes average unit vector (scaled weights supplied).","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-16-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.16.900","text":"rainbowJam() modified clean internal workflow. Specifically, argument preset prominent, making easy call rainbowJam(5, preset=\"ryb\") example. hue padding also modified reduce cases zero padding – padding added separation first last color hues sequence, prevent similar Cvals Lvals sequence optimal. rainbowJam() new argument phase allows shifting Cvals,Lvals sequence steps, reverse sequence, order create varied color sets. h2hw() hw2h() functions new argument preset calls h2hwOptions() uses appropriate color wheel. change makes easier convert color hues h2hw(60, preset=\"ryb\") convert default RGB yellow (hue=60) RYB yellow (hue=120). closestRcolor() argument preset defaults ryb, avoid using dichromat closest-color calculations.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-to-existing-functions-0-0-15-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"colorjam 0.0.15.900","text":"rainbowJam() arguments Lvals Cvals manually adjusted based upon initial usage feedback. h2hwOptions() refactored cleaner workflow. explicitly defines getOptions() default argument values, can replace defining preset. new argument default_preset first time function called, knows preset use initial values.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-0-0-15-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"colorjam 0.0.15.900","text":"group2colors() fixed longstanding bug input values contain \"\" return NA NA name. occurs referencing vector using name \"\" R forces return NA. Instead group2colors() now uses match(x, names(colors)) works properly.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"more-changes-to-rainbowjam-0-0-14-900","dir":"Changelog","previous_headings":"","what":"more changes to rainbowJam()","title":"colorjam 0.0.14.900","text":"almost certainly changes, using updated rainbowJam() experiencing cascade effects. now, make changes, force continue making changes needed. using updated rainbowJam() months, things became clear: Red-orange-yellow first three colors, terrible, substantial problems trying split light-dark variations. dark-yellow light-orange nearly identical. (Also R great keeping hue orange consistent adjusting luminance. Nobody hear feedback, ’s okay.) use green variations green, problematic color-blind viewers, making whole function ideal, substantial user base doesn’t see beautiful colors end. Ultimately many cases call rainbowJam(n + 20) hand-pick colors set. almost exactly problem originally trying solve rainbowJam(), means function failing. Last small thing, rainbowJam() padded end hue sequence avoid similar first last color, identical C,L values. happened, added aggressive hue pad colors still differ. Long story short, weren’t enough beautiful purples pinks. Overall changes: h2hwOptions() defines custom color wheels, adjusting hue rgb non-linear sequence. new argument preset named shortcut options: \"rgb\" R default; \"ryb\" previous red-yellow-blue, still includes green; \"dichromat\" new option removes green altogether, spaces remaining hues based upon perceived consistent visible distinctiveness steps. tried adjust effects simulated dichromat::dichromat() three types provides. h2hwOptions() new default preset=\"dichromat\"! Substantial change, green colors. change back call h2hwOptions(preset=\"ryb\") h2hwOptions(preset=\"rgb\"). shudder rainbowJam() argument Cvals uniformly increased 30. turns conversion HCL already handles values high, favoring luminance chroma – meaning request certain brightness, get brighness even expense lower chroma (saturation.) Thus work done Lvals luminance, chroma generally high feasible adjustments. rainbowJam() default pad last hue color. Instead preset=\"dichromat\" default h2hwOptions() adjusts hues 300 360 (almost nearly identical pink anyway) take less color wheel. rainbowJam() flipped 2nd 3rd values Lvals. Even calling rainbowJam(4, preset=\"ryb2\"), won’t give results update, without also changing 2nd 3rd values Lvals. realize, care.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"substantial-changes-to-rainbowjam-0-0-13-900","dir":"Changelog","previous_headings":"","what":"Substantial changes to rainbowJam()","title":"colorjam 0.0.13.900","text":"rainbowJam() refactored address longstanding critique colors muddy. New logic present rainbowJam() previous function available rainbowJam_v1() backward compatibility. new colors much brighter need testing time evaluate effects downstream uses. said, colors much improved, seems reasonable replace previous function now.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"other-changes-0-0-13-900","dir":"Changelog","previous_headings":"","what":"Other changes","title":"colorjam 0.0.13.900","text":"R files slightly refactored split functions different files.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-function-0-0-13-900","dir":"Changelog","previous_headings":"","what":"New function","title":"colorjam 0.0.13.900","text":"color_pie() simple function display colors pie chart form, helpful assess first last color rainbow color ramp. fact, color_pie() might moved jamba::showColors() optional output format. Current challenge label ring, input list color vectors.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-0-0-12-900","dir":"Changelog","previous_headings":"","what":"changes","title":"colorjam 0.0.12.900","text":"theme_jam() updated make major minor grid lines lighter shade gray, less interference text labels plot panel.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-0-0-11-900","dir":"Changelog","previous_headings":"","what":"changes","title":"colorjam 0.0.11.900","text":"scale_fill_jam(), scale_color_jam(), jam_pal() argument alpha control alpha transparency, scale 0 (transparent) 1 (non-transparent.)","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-0-0-10-900","dir":"Changelog","previous_headings":"","what":"changes","title":"colorjam 0.0.10.900","text":"closestRcolor() updated handle new behavior col2hcl() default assign names unnamed vectors. closestRcolor() now method argument define distance method (see stats::dist()); added optional “LUV” color model. cases “LUV” greater sensitivity albeit less accuracy. words large color vectors, “LUV” may produce non-repeated colors cost accuracy, “hcl” tends accurate sometimes snaps two similar colors closest R color. Future work probably handle greyscale colors separately.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-0-0-9-900","dir":"Changelog","previous_headings":"","what":"changes","title":"colorjam 0.0.9.900","text":"vals2colorLevels() updated handle edge cases input values numeric range.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-8-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.8.900","text":"vals2colorLevels() converts numeric vector color gradient, optionally divergent around baseline, optionally applying color warp using jamba::warpRamp() lens adjustment value.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"changes-0-0-7-900","dir":"Changelog","previous_headings":"","what":"changes","title":"colorjam 0.0.7.900","text":"Added function prefixes “jamba::” avoid handle inconsistent import implementation R.","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-7-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.7.900","text":"matrix2heatColors() apply color gradient column matrix, column color scale.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"additions-0-0-5-900","dir":"Changelog","previous_headings":"","what":"additions","title":"colorjam 0.0.5.900","text":"README.Rmd file created basic walkthrough colorjam. DESCRIPTION changed move “jamba” “Depends:” field. Guidance R Package Development R central docs cryptic point.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-4-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.4.900","text":"theme_jam() provides Jam-specific ggplot2 default. scale_color_jam(), scale_fill_jam(), jam_pal() provide categorical colors fills, respectively, using rainbowJam().","code":""},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"bug-fixes-and-enhancements-0-0-4-900","dir":"Changelog","previous_headings":"","what":"bug fixes and enhancements","title":"colorjam 0.0.4.900","text":"Updated DESCRIPTION include proper “Remotes” entry pointing Github jamba package. Updated closestRcolor() fix small bug name handling output.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/colorjam/news/index.html","id":"new-functions-0-0-3-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"colorjam 0.0.3.900","text":"group2colors() takes vector group labels assigns categorical colors, default using rainbowJam() can substituted color functions needed. maintains order factor levels, otherwise uses jamba::mixedSort() order unique labels assigning colors. closestRcolor() finds closest named R color colors() returns name. can also given custom color vector, return closest color color input list. rainbowJam() key categorical color function JAM package suite. uses Red-Yellow-Blue color wheel, uses pattern alternating Chroma (color saturation) Luminance (visible brightness) maximize difference adjacent colors.","code":""}]
