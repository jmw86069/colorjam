% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorjam-add-colors.R
\name{add_colors}
\alias{add_colors}
\title{Add categorical colors to an existing color set}
\usage{
add_colors(
  given_colors = NULL,
  n = 1,
  return_type = c("new", "full"),
  color_fn = rainbowJam,
  max_iterations = 100,
  do_plot = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{given_colors}{\code{character} vector of colors.
\itemize{
\item When \code{given_colors} is NULL, \code{n} new colors will be returned.
}}

\item{n}{\code{integer} number of colors to add to \code{given_colors}}

\item{color_fn}{\code{function}, default \code{rainbowJam()}. The first argument
is expected to be the integer number of colors to return.
Other arguments in \code{...} are passed to this function for custom options.}

\item{max_iterations}{\code{integer} default 100, maximum iterations to
attempt.}

\item{do_plot}{\code{logical} default FALSE, whether to plot the input and
added colors.}

\item{...}{additional arguments are passed to internal functions.}
}
\value{
\code{character} vector of colors with length \code{n}.
}
\description{
Add categorical colors to an existing color set
}
\examples{
n1 <- 6;
n <- 2;
given <- jamba::nameVector(rainbowJam(n1));
new_colors <- add_colors(given, n=n, do_plot=TRUE, dist_threshold=20)
names(new_colors) <- seq_along(new_colors);
show_color_distance(c(given, new_colors))
show_color_distance(sort_colors(c(given, new_colors)))

given2 <- c(given, new_colors);
new_colors2 <- add_colors(unname(given2), n=n, do_plot=TRUE, dist_threshold=20)
names(new_colors2) <- seq_along(new_colors2) + 2;
show_color_distance(sort_colors(c(given2, new_colors2)))

jamba::showColors(list(given=given,
   `add 2`=sort_colors(c(given, new_colors)),
   `add 2 more`=sort_colors(c(given2, new_colors2))))

new_colors4 <- add_colors(given, n=4, do_plot=TRUE, dist_threshold=20)
names(new_colors4) <- seq_along(new_colors4);
show_color_distance(sort_colors(c(given, new_colors4)))

jamba::showColors(list(given=given,
   `add 2`=sort_colors(c(given, new_colors)),
   `add 2 more`=sort_colors(c(given2, new_colors2)),
   `add 4 upfront`=sort_colors(c(given, new_colors4))))

# Todo: consider ensuring desaturated colors are somewhat different also
show_color_distance(color_distance(given, new_colors), pc=c(given, new_colors))
hm1 <- show_color_distance(sort_colors(c(given, new_colors)), pc=unname(c(given, new_colors)))
hm1
hm2 <- show_color_distance(colorspace::desaturate(amount=0.7, sort_colors(c(given, new_colors))))
hm3 <- show_color_distance(colorspace::desaturate(amount=1, sort_colors(c(given, new_colors))))
hm1 + hm2 + hm3

# test commoon themes
given <- c(DM="dodgerblue3", CTL="gold")
add_colors(unname(given), n=3, do_plot=TRUE)

}
