% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorjam-blendcolors.R
\name{blend_colors}
\alias{blend_colors}
\title{Blend multiple colors}
\usage{
blend_colors(
  x,
  preset = c("ryb", "none", "dichromat", "rgb", "ryb2"),
  h1 = NULL,
  h2 = NULL,
  do_plot = FALSE,
  lens = 0,
  c_weight = 0.2,
  c_floor = 12,
  ...
)
}
\arguments{
\item{x}{\code{character} vector of R colors in hex format, or \code{list}
of color vectors, where each vector will be independently
blended.}

\item{preset}{\code{character} value indicating the color wheel preset,
passed to \code{colorjam::h2hwOptions()}.}

\item{do_plot}{\code{logical} indicating whether to depict the color
blend operation using \code{jamba::showColors()}.}

\item{lens}{\code{numeric} value used to influence the color saturation
after averaging color wheel angles.}

\item{c_weight}{\code{numeric} value used to weight the average color
chroma (saturation) using the mean chroma values of the input
colors. When \code{c_weight=0} the chroma uses the radius returned
by the mean color wheel angle.}

\item{c_floor}{\code{numeric} value indicating the \code{C} chroma HCL value
below which a color is considered to be "grey" and unsaturated.
When this happens, the hue contribution is set to 0.001 relative
to other colors being blended. This correction is done because
every color is assigned one \code{H} hue value in HCL, even when
the \code{C} chroma (saturation) is zero, therefore these colors
effectively have no \code{H} hue.}

\item{...}{additional arguments are ignored.}
}
\value{
\code{character} vector with blended color; when input \code{x}
is a \code{list} the returned vector will have length \code{length(x)}.
}
\description{
Blend multiple colors
}
\details{
This function is intended to blend two or more colors,
by default using "paint mixing" style, similar to subtractive
color mixing. It accomplishes this goal by using a red-yellow-blue
color wheel (very similar to cyan-yellow-magenta), then determines
the average color hue with appropriate loss of color saturation.

This function also utilized color transparency, applied internally
as relative color weights, during the color mixing process.

This function blends multiple colors, including several useful
features:
\itemize{
\item color wheel red-yellow-blue, subtractive color mixing
\item can blend more than two colors at once
\item accounts for transparency of individual colors
}

The basic design guide was to meet these expectations:
\itemize{
\item red + yellow = orange
\item blue + yellow = green
\item red + blue = purple
\item blue + red + yellow = some brown/gray substance
}

The input \code{x} can be a vector of colors, or a \code{list}. When
\code{x} is a \code{list} then the unique vectors are blended, returning
a vector with length \code{length(x)}.

The default additive color mixing, with red-green-blue colors
used in electronic monitors, does not meet these criteria.
(In no logical paint mixing exercise would someone expect that
mixing red and green would make yellow; or that
blue and yellow would make grey.)

In general the function performs well, with some exceptions
where the color hue angle is not well-normalized opposite
its complementary color, and therefore does not make the
expected "brownish/grey" output. Examples include
\code{blend_colors(c("yellow", "purple"))} which is closer
to blue + yellow = green, because purple is also composed
of blue with some red. Indeed, the R color hue for purple
is 283; the hue for blue is 266; the hue for red is 12 (372);
which means purple is substantially closer to blue than red.
A suitable workaround in this case is to use
\code{blend_colors(c("yellow", "deeppink4"))}.
}
\examples{
blend_colors(c("red", "yellow"), do_plot=TRUE)

blend_colors(c("blue", "gold"), do_plot=TRUE)

blend_colors(c("blue", "red3"), do_plot=TRUE)

blend_colors(c("dodgerblue", "springgreen3"), do_plot=TRUE)

blend_colors(c("green", "dodgerblue"), do_plot=TRUE)

blend_colors(c("red", "gold", "blue"), do_plot=TRUE)

blend_colors(c("green4", "red"), do_plot=TRUE)

blend_colors(c("deeppink4", "gold"), do_plot=TRUE)

blend_colors(c("blue4", "darkorange1"), do_plot=TRUE)

}
\seealso{
Other colorjam core: 
\code{\link{closestRcolor}()},
\code{\link{colors_to_df}()},
\code{\link{group2colors}()},
\code{\link{rainbowJam}()},
\code{\link{sort_colors}()},
\code{\link{subset_colors}()}
}
\concept{colorjam core}
