% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorjam-complement.R
\name{color_complement}
\alias{color_complement}
\title{Create color complement by rotating the color hue}
\usage{
color_complement(
  color,
  Hflip = 180,
  Cfloor = NULL,
  Crange = c(5, 100),
  Lrange = c(10, 95),
  Cgrey = getOption("jam.Cgrey", 5),
  preset = getOption("colorjam.preset", "dichromat"),
  useWarpHue = TRUE,
  use_hsl = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{color}{\code{character} vector of R compatible colors.}

\item{Hflip}{\code{numeric} value in degrees (from 0 to 360) added
to the color hue to produce the final color hue. Typically
180 degrees will select the color opposite the input color
on a virtual color wheel. Note that \code{warpHue=TRUE} also
enables a customized color wheel.}

\item{Cfloor}{\code{numeric} deprecated in favor of \code{Crange}, however
when \code{Cfloor} is provided, it is given priority over \code{Crange}.
value used to limit output chroma \code{C}
values to this minimum value, to ensure a minimum color saturation.}

\item{Crange}{\code{numeric} vector with the permitted range of output
color chroma \code{C} values. When supplied, output values are
forced to this range with no other scaling of intermediate values.
Note that input colors at or below chroma \code{Cgrey} are
considered greyscale and are not complemented.}

\item{Lrange}{\code{numeric} vector with the permitted range of output
luminance \code{L} values. When supplied, output values are
simply forced to this range with no other scaling of intermediate
values.}

\item{Cgrey}{\code{numeric} color chroma, at or below which a color is
considered greyscale, therefore the color hue is not relevant,
and the \code{Crange} is not applied.}

\item{useWarpHue}{\code{logical} indicating whether to use the warp
hue functions \code{colorjam::h2hw()} and \code{colorjam::hw2h()} which
effectively change the color wheel from red-green-blue to
red-yellow-blue.}

\item{...}{additional arguments are ignored.}
}
\value{
\code{character} vector of complementary colors.
}
\description{
Create color complement by rotating the color hue
}
\details{
This function rotates the color hue to create a complementary
color for each \code{color} input. It differs from standard methods
by using warped color hue by default (\code{useWarpHue=TRUE}), which
uses a red-yellow-blue color wheel instead of R default
red-green-blue. It also imposes a minimum chroma, which
ensures the output color is reasonably high in color
saturation.
}
\examples{
n <- 5;
rc <- colorjam::rainbowJam(n);
rc_comp <- color_complement(rc, preset="dichromat");
rc_comp2 <- color_complement(rc, preset="dichromat", useWarpHue=FALSE);
rc_comp3 <- color_complement(rc, preset="ryb");
jamba::showColors(list(rainbowJam=rc,
   `complement\n(preset="dichromat")`=rc_comp,
   `complement\n(useWarpHue=FALSE)`=rc_comp2,
   `complement\n(preset="ryb")`=rc_comp3));

rc <- colorjam::rainbowJam(n, preset="ryb");
rc_comp <- color_complement(rc, preset="ryb");
jamba::showColors(list(`rainbowJam\n(preset="ryb")`=rc,
   `complement\n(preset="ryb")`=rc_comp));

## divergent color gradients through white
## hint: use higher lens value to make middle colors more intense
rc <- colorjam::rainbowJam(n);
rc_comp <- color_complement(rc);
rc_ramps <- lapply(jamba::nameVector(seq_along(rc)), function(i){
   j <- jamba::getColorRamp(c(rc[i], "white", rc_comp[i]),
      n=25,
      lens=0,
      divergent=TRUE);
   names(j) <- "";
   names(j)[1] <- "original colors";
   names(j)[25] <- "color complements";
   j;
});
jamba::showColors(rc_ramps, groupCellnotes=TRUE, groupByColors=FALSE);

## divergent color gradients through black
## hint: use higher lens value to make middle colors more intense
rc_ramps2 <- lapply(jamba::nameVector(seq_along(rc)), function(i){
   j <- jamba::getColorRamp(c(rc[i], "black", rc_comp[i]),
      n=25,
      lens=1,
      divergent=TRUE);
   names(j) <- "";
   names(j)[1] <- "original colors";
   names(j)[25] <- "color complements";
   j;
});
jamba::showColors(rc_ramps2, groupCellnotes=TRUE, groupByColors=FALSE);

# test divergent color gradient
RdBu_r <- jamba::getColorRamp("RdBu_r");
rc_divergent <- color_complement(RdBu_r)
jamba::showColors(list(RdBu_r=RdBu_r, complement=rc_divergent));

}
\seealso{
Other colorjam core: 
\code{\link{blend_colors}()},
\code{\link{closestRcolor}()},
\code{\link{closest_named_color}()},
\code{\link{colors_to_df}()},
\code{\link{group2colors}()},
\code{\link{rainbowJam}()},
\code{\link{sort_colors}()},
\code{\link{subset_colors}()}
}
\concept{colorjam core}
\concept{jam utility functions}
