% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorjam-find-color-spread.R
\name{find_color_spread}
\alias{find_color_spread}
\title{Find a spread of colors with minimum distance between them}
\usage{
find_color_spread(
  x,
  n = 2,
  min_distance = 11.5,
  step_distance = 0,
  method = "cie2000",
  use_white = "F5",
  byCols = c("-met_n", "-d", "-found_n"),
  first_only = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{\code{character} vector of colors}

\item{n}{\code{integer} minimum number of colors}

\item{min_distance}{\code{numeric} minimum distance required between colors.}

\item{step_distance}{\code{numeric} default 0, when non-zero the \code{min_distance}
is iterated until the \code{min_distance} criteria are met for at least
\code{n} colors.}

\item{method}{\code{character} distance method, default 'cie2000'.}

\item{use_white}{\code{character} white reference, default 'F5'.}

\item{byCols}{\code{character} with optional column sorting, used to prioritize
results when \code{first_only=FALSE}.
The columns are sorted as follows:
\itemize{
\item \code{'-met_n'} - decreasing filter of whether the \code{n} threshold was met
\item \code{'-d'} - decreasing minimum distance in each color set
\item \code{'-found_n'} - decreasing number of colors that met the criteria
}}

\item{first_only}{\code{logical} default FALSE, whether to return only the
first successful color combination meeting the criteria for
\code{min_distance} and \code{n}.
\itemize{
\item When \code{first_only=FALSE} it will exhaustively determine all possible
combinations of colors, which is time consuming for larger \code{n} values,
even when \code{n=6}. However, this approach is able to find the most
different combination of colors from \code{x}, based upon \code{byCols} column
sorting.
}}

\item{...}{additional arguments are passed to \code{color_distance()}.}
}
\description{
Find a spread of colors with minimum distance between them
}
\details{
Intended to be called internally by \code{add_colors()}, this function
takes a vector of colors \code{x}, and finds a subset of
at least \code{n} colors that each have color distance \code{min_distance}
using the \code{method} and \code{use_white} white reference.

It is intended to solve the problem when M colors are available,
very close to a neighboring color, but a subset N colors are
requested which each have at least \code{min_distance} from each other.

This function is currently not very optimized, although it does
avoid repeating combinations of color tests.

It currently iterates each color, then each secondary color with
at least \code{min_distance}, and so on, until at least \code{n} colors
in a set have at least \code{min_distance} distance between them.
It then runs all combinations and sorts for the set with the
highest minimum distance, thereby the "most distinctive subset".
}
\examples{
find_color_spread(colorspace::rainbow_hcl(12), n=5, min_distance=20, step_distance=-1, first_only=TRUE)
find_color_spread(colorspace::rainbow_hcl(30), n=12, min_distance=20, step_distance=-1, first_only=TRUE)

}
