% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorjam-gradient.R
\name{make_jam_divergent}
\alias{make_jam_divergent}
\title{Make divergent color gradient}
\usage{
make_jam_divergent(linear1, linear2 = NULL, lite = TRUE, n = 21, ...)
}
\arguments{
\item{linear1}{\code{character} input consisting of one of:
\itemize{
\item a single \code{character} R color
\item a single \code{character} color gradient name
\item a \code{character} vector of R colors. When supplying a vector of colors,
the order is expected to be from blank to maximum color
}}

\item{linear2}{\code{character} input consisting of one of:
\itemize{
\item a single \code{character} R color
\item \code{NULL} in which case the color(s) defined by \code{linear1} are
passed to \code{color_complement()}
\item a single \code{character} color gradient name
\item a \code{character} vector of R colors. When supplying a vector of colors,
the order is expected to be from blank to maximum color
}}

\item{lite}{\code{logical} indicating whether the middle color
should be lite (white), or when \code{lite=FALSE} the middle
color will be dark (black). When \code{linear1} or \code{linear2} are provided
as a named color gradient, such as \code{"Reds"} or \code{"Blues"}, that
gradient is used as-is, even if the gradient is designed with
a light (or dark) neutral color, therefore ignoring \code{lite}.}

\item{n}{\code{integer} number of final colors to produce. Note that
\code{n} must be an odd number, in order to preserve the middle color.}

\item{...}{additional arguments are passed to functions called
as needed.}
}
\description{
Make divergent color gradients that may also use jam_linear and jam_divergent
}
\details{
This function is intended for a broad capability to create divergent
color gradients. It can take several types of input for each "side"
of a divergent gradient, and will apply light (white) or dark (black)
middle color as defined.

The types of input recognized:
\itemize{
\item \code{character} string indicating a single R color, which is passed to
\code{jamba::getColorRamp()} in order to create one linear color gradient
with the relevant light or dark baseline color.
\item \code{character} vector indicating a specific sequence of R colors, also
passed to \code{jamba::getColorRamp()} to return a single linear color gradient.
In this case, the color vector should already include the baseline light (white)
or dark (black) color. The order of colors is expected to be from
blank color to maximum color.
\item \code{character} string indicating the name of a recognized color gradient,
which can be from \code{RColorBrewer}, \code{viridis}, or one of the names
in \code{jam_linear}.
}

When a color from \code{jam_linear} is provided, the appropriate gradient
is used for the corresponding lite or dark baseline color,
where \code{lite=TRUE} uses \code{jam_linear}, and \code{lite=FALSE} uses the
appropriate half gradient from \code{jam_divergent}.

Note that this function does not apply the color gradient to a range
of numeric values. For that capability, use \code{col_div_xf()} with the
color gradient produced by this function.
}
\examples{
jamba::showColors(jam_linear)

jg1 <- make_jam_divergent("royalblue", "orangered")
jamba::showColors(jg1)
showDichromat(jg1)

jg1b <- make_jam_divergent("royalblue", main="Supplied as one color")
jamba::showColors(jg1b)

jg2 <- make_jam_divergent("slateblue", "firebrick", n=21)
jamba::showColors(jg2)
showDichromat(jg2)

jg3 <- make_jam_divergent("slateblue", "firebrick", lite=FALSE, n=21)
jamba::showColors(jg3)
showDichromat(jg3)

# Compare manually assembled Blues-Reds to "RdBu_r"
jg4 <- make_jam_divergent("Blues", "Reds", lite=TRUE, n=21)
jamba::showColors(c(jg4,
   list(RdBu_r=jamba::getColorRamp("RdBu_r", n=21))))

# show "inferno"
jg5 <- make_jam_divergent("inferno", lite=FALSE, n=21, gradientWtFactor=1)
jamba::showColors(jg5)

# Optional ComplexHeatmap
if (jamba::check_pkg_installed("ComplexHeatmap")) {
xseq <- seq(from=-1, to=1, by=0.1);
mseq <- matrix(xseq, ncol=1);
m <- mseq \%*\% t(mseq);
rownames(m) <- seq_len(nrow(m));
colnames(m) <- seq_len(ncol(m));
hm1 <- ComplexHeatmap::Heatmap(m[,1:10],
   cluster_columns=FALSE,
   cluster_rows=FALSE,
   row_names_side="left",
   border=TRUE,
   heatmap_legend_param=list(
      border="grey10",
      at=seq(from=-1, to=1, by=0.25),
      color_bar="discrete"),
   col=jg3[[1]])

hm2 <- ComplexHeatmap::Heatmap(m[21:1,12:21],
   cluster_columns=FALSE,
   cluster_rows=FALSE,
   border=TRUE,
   heatmap_legend_param=list(
      border=TRUE,
      at=seq(from=-1, to=1, by=0.25),
      color_bar="discrete"),
   col=jg2[[1]])
hm1 + hm2
}

}
\seealso{
Other colorjam gradients: 
\code{\link{col_div_xf}()},
\code{\link{col_linear_xf}()},
\code{\link{twostep_gradient}()}
}
\concept{colorjam gradients}
