% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jam-color.R
\name{matrix2heatColors}
\alias{matrix2heatColors}
\title{Convert numeric matrix to heatmap colors}
\usage{
matrix2heatColors(
  x,
  colorV = group2colors(colnames(x)),
  defaultBaseColor = "#FFFFFF",
  transformFunc = c,
  lens = 0,
  shareLimit = TRUE,
  numLimitFactor = 0.95,
  numLimit = NULL,
  baseline = 0,
  color_below_baseline = "#FFFFFF",
  divergent = FALSE,
  rampN = 15,
  trimRamp = c(0, 0),
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{numeric matrix. If there are no \code{colnames(x)} they will
be created using \code{jamba::makeNames(rep("x", ncol(x)))}.}

\item{colorV}{character vector of R colors, named by \code{colnames(x)},
and recycled to \code{ncol(x)} if needed. If \code{colorV} is supplied as
a list, the list elements are mapped to \code{colnames(x)} in order.}

\item{defaultBaseColor}{character vector of R colors used as the default
base color, when \code{colorV} is supplied as a vector.}

\item{transformFunc}{function applied to numeric values before
the color gradient is mapped to numeric values. For example,
\code{transformFunc=function(i)-log10(i)} would map colors to P-value
using a \code{-log10(p)} transformation.}

\item{lens}{numeric value passed to \code{warpRamp()} to adjust the
distribution of colors along the numeric range.}

\item{shareLimit}{logical indicating whether one numeric limit \code{numLimit}
should be used to define the numeric range for color mapping.}

\item{numLimitFactor}{when \code{numLimit} is NULL, this factor is applied to
the maximum numeric value to determine the \code{numLimit}.}

\item{numLimit}{numeric value to define the maximum numeric value
above which all numeric values are mapped to the maximum color.
When set to \code{NULL} the \code{numLimitFactor} is used to define
the \code{numLimit}.}

\item{baseline}{numeric value to define the numeric baseline, used
when \code{divergent=FALSE}. Values are recycled to \code{ncol(x)} to be
applied to each column individually.}

\item{color_below_baseline}{color used when numeric value is
below the \code{baseline}. Values are recycled to \code{ncol(x)} to be
applied to each column individually. When \code{color_below_baseline}
is \code{NULL}, the first color in the color ramp is used for all
values below the baseline.}

\item{divergent}{logical indicating whether to apply colors to the numeric
range symmetric around zero.}

\item{rampN}{integer value to define the number of color breaks for
each color gradient.}

\item{trimRamp}{numeric vector with two values, used by
\code{jamba::getColorRamp()} to trim the intermediate color gradient before
creating the final color ramp with length \code{rampN}. For example,
by default \code{jamba::getColorRamp()} creates a color gradient with
15 colorr, defined by argument \code{gradientN=15}, so the argument
\code{trimRamp=c(4,2)} will trim the first 4 colors and the last 2 colors
from the 15-color gradient, before generating the final color
gradient with length \code{rampN}. The \code{trimRamp} argument is especially
useful to remove the leading white color, or to trim the first
few colors to ensure the first color in the gradient is visibly
different from the background color defined by \code{defaultBaseColor}.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are passed to \code{jamba::getColorRamp()}
for additional customization. These arguments are handled across
all columns, and not a column-by-column basis.}
}
\description{
Convert numeric matrix to heatmap colors
}
\details{
This function is intended as a rapid way of applying a color
gradient to columns of numeric values, where each column
has its own base color. It calls \code{jamba::getColorRamp()}
for each column, and when supplied with one color, it
creates a color gradient from \code{"grey95"} to the output
of \code{jamba::color2gradient()}.

When \code{lens} is non-zero, the color gradient is warped in order
to intensify the color saturation across the numeric range.
}
\examples{
set.seed(123);
# generate a random numeric matrix
m1 <- matrix(ncol=12, rnorm(120));
m1n <- m1;
m1n[] <- format(round(abs(m1), digits=2), trim=TRUE);
jamba::imageByColors(
   matrix2heatColors(abs(m1),
      transformFunc=c,
      divergent=FALSE,
      lens=-5,
      shareNumLimit=TRUE,
      baseline=0,
      numLimit=4),
   cellnote=m1n);

}
\seealso{
Other colorjam assignment: 
\code{\link{col_div_xf}()},
\code{\link{col_linear_xf}()},
\code{\link{group2colors}()},
\code{\link{vals2colorLevels}()}
}
\concept{colorjam assignment}
