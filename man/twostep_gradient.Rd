% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorjam-gradient.R
\name{twostep_gradient}
\alias{twostep_gradient}
\title{Create two-step linear gradient}
\usage{
twostep_gradient(
  color1 = NULL,
  color2 = NULL,
  n = 11,
  lite = TRUE,
  defaultBaseColor = NULL,
  adjust = 1.5,
  do_fixYellow = TRUE,
  debug = FALSE,
  ...
)
}
\arguments{
\item{color1}{\code{character} color or name of a recognized color gradient.}

\item{color2}{\code{character} color or name of a recognized color gradient;
or when \code{color2=NULL} then the hue of \code{color1} is shifted to
emulate the effect of having a similar neighboring color hue.
In this case the input \code{color1} is used as \code{color2} to become
the primary output color.}

\item{n}{\code{integer} number of gradient colors to return. When \code{n=0}
or \code{n=NULL} the output is a color function.}

\item{lite}{\code{logical} indicating whether the background color
should be white, or when \code{lite=FALSE} the background color
is black.}

\item{defaultBaseColor}{\code{character} used to define a specific
background color, and therefore overrides \code{lite}.}

\item{adjust}{\code{numeric} value used to adjust the relative
weight between \code{color1} and \code{color2}, where values higher
than 1 favor \code{color2} and negative values, or values less
than 1 favor \code{color1}.}

\item{do_fixYellow}{\code{logical} indicating whether to call
\code{jamba::fixYellow()} which fixes the greenish hue that
sometimes results from what is intended to be pure yellow.}

\item{debug}{\code{logical} indicating whether to create a plot
to show the color blending steps.}

\item{...}{additional arguments are passed to \code{jamba::getColorRamp()}.}
}
\description{
Create two-step linear gradient by gradually blending
two linear color gradients
}
\details{
This function is intended to produce a two-step linear gradient
effect, similar to the strategy used by \code{RColorBrewer}, but
without specific color constraints. See examples.

This function takes two color gradients and blends them
using a weighting scheme that begins with 100\% \code{color1}, and
gradually becomes 100\% \code{color2}.

The input \code{color1} and \code{color2} can be any input recognized
by \code{jamba::getColorRamp()}. For example a single color can
be used to create a gradient, or the name of a known color
gradient can be used, for example \code{"Reds"} will refer
to \code{RColorBrewer} palette \code{"Reds"}. See the examples.

In general most gradients can be blended using this function
to produce a new color gradient where both the visual intensity
and color hue vary along the gradient, making each color step
more visibly distinct than when only the visual intensity
changes.

When supplying a single color as input to \code{color1} or \code{color2}
it sometimes works best to alter the brightness of one or both
colors so the intermediate gradients have similar intensities.
Experimenting with \code{debug=TRUE} is recommended.
}
\examples{
ts <- twostep_gradient("yellow", debug=TRUE)

ts1 <- twostep_gradient("orange2", "firebrick", n=11, debug=TRUE)
ts2 <- twostep_gradient("aquamarine", "dodgerblue", n=11, debug=TRUE)

# stitch them together with make_jam_divergent()
ts1ts2 <- make_jam_divergent(list(ts2=ts2), list(ts1=ts1), n=21)
jamba::showColors(ts1ts2)
ts1ts2flat <- make_jam_divergent("dodgerblue", "firebrick", n=21)
jamba::showColors(list(
   twostep=ts1ts2[[1]],
   flat=ts1ts2flat[[1]]))

ts3 <- twostep_gradient("Greens", "Blues", n=11, debug=TRUE)

ts4 <- twostep_gradient("slateblue2", "firebrick", n=11, debug=TRUE)

ts5 <- twostep_gradient("cividis", "inferno", n=11, debug=TRUE, adjust=-1.2)

gr1 <- twostep_gradient("slateblue", "purple", debug=TRUE)
gr2 <- twostep_gradient("gold", "darkorange", debug=TRUE)
div12 <- make_jam_divergent(list(gr1=gr1), list(gr2=gr2))
jamba::showColors(div12)
div12flat <- make_jam_divergent("purple", "gold")
jamba::showColors(list(
   twostep=div12[[1]],
   flat=div12flat[[1]]))

gr1d <- twostep_gradient("slateblue1", "purple", debug=TRUE, lite=FALSE)
gr2d <- twostep_gradient("darkorange", "gold", debug=TRUE, lite=FALSE)
div12d <- make_jam_divergent(list(gr1d=gr1d), list(gr2d=gr2d))
jamba::showColors(div12d)
div12dflat <- make_jam_divergent("purple", "gold", lite=FALSE)
jamba::showColors(list(
   twostep=div12d[[1]],
   flat=div12dflat[[1]]))

}
\seealso{
Other colorjam gradients: 
\code{\link{col_div_xf}()},
\code{\link{col_linear_xf}()},
\code{\link{make_jam_divergent}()}
}
\concept{colorjam gradients}
